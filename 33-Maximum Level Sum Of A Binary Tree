/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Method 1 (Using BFS)

class Solution {
    public int maxLevelSum(TreeNode root) {
        // Queue for level order traversal
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);

        int maxSumLevel = 0;          // To store the level with maximum sum
        int currentLevel = 0;         // To track the current level during traversal
        int maxSum = Integer.MIN_VALUE; // Initialize maxSum with smallest integer to find max sum

        // Perform BFS level order traversal until all levels are processed
        while (!queue.isEmpty()) {
            currentLevel++;
            int levelSize = queue.size(); // Number of nodes at current level
            int levelSum = 0;              // Sum of node values at current level

            // Process all nodes at the current level
            while (levelSize-- > 0) {
                TreeNode currentNode = queue.poll();
                levelSum += currentNode.val;

                // Add left child if present
                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }

                // Add right child if present
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }

            // If there are multiple levels with the same maximum sum, the smallest level number is returned.
            if (levelSum > maxSum) {
                // Update the maximum sum and corresponding level if the current level sum is higher.
                maxSum = levelSum;
                maxSumLevel = currentLevel;
            }
        }

        // Return the level with the maximum sum of node values
        return maxSumLevel;
    }
}


//Method 2 (Using DFS)

class Solution {
    // Map to store cumulative sum of node values for each level
    private Map<Integer, Integer> levelSumMap;

    public int maxLevelSum(TreeNode root) {
        levelSumMap = new HashMap<>();

        // Step 1: Populate levelSumMap with DFS traversal
        getLevelSum(root, 1);

        int maxSumLevel = 0;               // Level with the maximum sum
        int maxSum = Integer.MIN_VALUE;    // Initialize to the smallest value

        // Step 2: Iterate through the map to find the level with the maximum sum
        for (int level : levelSumMap.keySet()) {
            int levelSum = levelSumMap.get(level);
            if (levelSum > maxSum) {
                maxSum = levelSum;
                maxSumLevel = level;
            }
        }

        // Return the level with the highest sum
        return maxSumLevel;
    }

    private void getLevelSum(TreeNode node, int level) {
        if (node == null) {
            return;
        }

        // Add current node's value to its corresponding level in the map
        levelSumMap.put(level, levelSumMap.getOrDefault(level, 0) + node.val);

        // Recur for left and right subtrees with level increased
        getLevelSum(node.left, level + 1);
        getLevelSum(node.right, level + 1);
    }
}
