/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    private String smallestPath;

    public String smallestFromLeaf(TreeNode root) {
        smallestPath = null;
        // Performs DFS traversal to build all leaf-to-root paths and track the smallest one
        findLexicographicallySmallestPath(root, new StringBuilder());
        return smallestPath;
    }

    private void findLexicographicallySmallestPath(TreeNode root, StringBuilder currentPath) {
        if (root == null) {
            return;
        }

        // Append current node's character (root-to-leaf direction)
        currentPath.append((char) (root.val + 'a'));

        if (isLeafNode(root)) {
            // At a leaf, reverse the path to get leaf-to-root order
            String leafToRootPath = currentPath.reverse().toString();

            // Update smallestPath if this one is lexicographically smaller
            if (smallestPath == null || leafToRootPath.compareTo(smallestPath) < 0) {
                smallestPath = leafToRootPath;
            }

            // Reverse back to original state for correct backtracking
            currentPath.reverse();
        }

        // Continue DFS on left and right children
        findLexicographicallySmallestPath(root.left, currentPath);
        findLexicographicallySmallestPath(root.right, currentPath);

        // Backtrack: remove the last added character before returning to the parent
        currentPath.setLength(currentPath.length() - 1);
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}
