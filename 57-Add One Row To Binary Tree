/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

 //Using BFS

class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        // Special case: If depth == 1, create a new root node with 'val' and attach the original tree as its left subtree.
        if (depth == 1) {
            TreeNode newRoot = new TreeNode(val);
            newRoot.left = root;
            return newRoot;
        }

        // Initialize level tracker and queue for BFS traversal.
        int currentDepth = 0;
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);

        // Traverse the tree level by level until reaching depth - 1.
        while (currentDepth < depth) {
            currentDepth++;
            int size = queue.size(); // Number of nodes at current level

            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();

                // If we have reached depth - 1, insert new nodes at this level
                if (currentDepth == depth - 1) {
                    TreeNode newLeftNode = new TreeNode(val);
                    TreeNode newRightNode = new TreeNode(val);

                    // Attach the existing left and right subtrees to new nodes
                    newLeftNode.left = currentNode.left;
                    newRightNode.right = currentNode.right;

                    // Connect the new nodes to the current node
                    currentNode.left = newLeftNode;
                    currentNode.right = newRightNode;
                } else {
                    // Continue BFS traversal if we haven't reached depth - 1
                    if (currentNode.left != null) {
                        queue.offer(currentNode.left);
                    }
                    if (currentNode.right != null) {
                        queue.offer(currentNode.right);
                    }
                }
            }
        }

        return root;
    }
}


//Using DFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        // Special case: If depth == 1, create a new root and attach original tree to it
        if (depth == 1) {
            TreeNode newRoot = new TreeNode(val);
            newRoot.left = root;
            return newRoot;
        }

        // Recursively traverse the tree, starting from depth = 1
        insertRow(root, val, depth, 1);
        return root;
    }

    private void insertRow(TreeNode node, int val, int depth, int curDepth) {
        if (node == null) {
            return;
        }

        // When we reach depth - 1, insert new nodes
        if (curDepth == depth - 1) {
            TreeNode newLeftNode = new TreeNode(val);
            TreeNode newRightNode = new TreeNode(val);

            // Attach original left and right subtrees to new nodes
            newLeftNode.left = node.left;
            newRightNode.right = node.right;

            // Attach new nodes to current node
            node.left = newLeftNode;
            node.right = newRightNode;
        } else {
            // Recurse deeper in the tree
            insertRow(node.left, val, depth, curDepth + 1);
            insertRow(node.right, val, depth, curDepth + 1);
        }
    }
}
