/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

 //Using BFS

class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        // Special case: if depth is 1, create a new root and set original tree as its left subtree
        if (depth == 1) {
            TreeNode newRoot = new TreeNode(val);
            newRoot.left = root;
            return newRoot;
        }

        // BFS queue for level-order traversal
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);

        int currentDepth = 1;

        // Traverse the tree until we reach depth - 1 level
        while (!queue.isEmpty() && currentDepth < depth) {
            int size = queue.size();

            while (size-- > 0) {
                TreeNode node = queue.poll();

                if (currentDepth == depth - 1) {
                    // Add new node on the left
                    TreeNode newLeftNode = new TreeNode(val);

                    /*
                     * Rule:
                     * Create a new left node with value 'val'
                     * - Assign node.left as the left child of the new node
                     * - Assign the new node as node.left
                     * - We do NOT assign anything to newLeftNode.right; it remains null
                     */
                    newLeftNode.left = node.left;
                    node.left = newLeftNode;

                    // Add new node on the right
                    TreeNode newRightNode = new TreeNode(val);

                    /*
                     * Rule:
                     * Create a new right node with value 'val'
                     * - Assign node.right as the right child of the new node
                     * - Assign the new node as node.right
                     * - We do NOT assign anything to newRightNode.left; it remains null
                     */
                    newRightNode.right = node.right;
                    node.right = newRightNode;

                } else {
                    // Continue traversing until we reach depth - 1
                    if (node.left != null) {
                        queue.offer(node.left);
                    }
                    if (node.right != null) {
                        queue.offer(node.right);
                    }
                }
            }

            currentDepth++;
        }

        return root;
    }
}



//Using DFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        // Special case: if the new row has to be inserted at the root level
        if (depth == 1) {
            TreeNode newRoot = new TreeNode(val);

            /*
             * Rule:
             * - When depth == 1, create a new node with the given value.
             * - Set the original tree as the left child of this new root.
             * - The right child remains null.
             */
            newRoot.left = root;
            root = newRoot;
        }

        // Start recursive DFS traversal to insert row at required depth
        insertOneRow(root, 1, depth, val);
        return root;
    }

    private void insertOneRow(TreeNode root, int currentDepth, int depth, int val) {
        // Base case: null node encountered
        if (root == null) {
            return;
        }

        /*
         * When we are one level above the target depth (i.e., currentDepth == depth - 1),
         * we insert new nodes directly beneath the current node.
         */
        if (currentDepth == depth - 1) {
            // Create new nodes with the specified value
            TreeNode newLeftNode = new TreeNode(val);
            TreeNode newRightNode = new TreeNode(val);

            /*
             * Rule:
             * - The new left node becomes the left child of the current node.
             * - The original left child becomes the left child of the new node.
             * - The new right node becomes the right child of the current node.
             * - The original right child becomes the right child of the new node.
             * 
             * Note: newLeftNode.right and newRightNode.left are left null intentionally.
             */
            newLeftNode.left = root.left;
            newRightNode.right = root.right;
            root.left = newLeftNode;
            root.right = newRightNode;

            return; // Done inserting at this level
        }

        // Recurse deeper on both left and right subtrees
        insertOneRow(root.left, currentDepth + 1, depth, val);
        insertOneRow(root.right, currentDepth + 1, depth, val);
    }
}
