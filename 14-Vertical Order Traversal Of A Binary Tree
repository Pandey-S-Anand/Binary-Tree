/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/*
         1 (0)
       /       \
    2 (-1)     3 (+1)
   /    \     /     \
 4 (-2)  6 (0)  5 (0)  7 (+2)

Key Observations:
- Leftmost nodes have the lowest horizontal distance (HD)/col because as we traverse left from the root,
  the horizontal distance/col decreases by 1 for each level (moving to negative values).
- Rightmost nodes have the highest horizontal distance (HD)/col because as we traverse right from the root,
  the horizontal distance/col increases by 1 for each level (moving to positive values).

TreeMap Usage:
- TreeMap stores nodes by horizontal distance (HD)/col in ascending order automatically.
- Since HD/col is the key, TreeMap ensures columns are ordered from leftmost (smallest HD/col)
  to rightmost (largest HD/col).
- Vertical view requires capturing all nodes at the same HD/col.

Horizontal Distance/Column Breakdown:
- HD/col = -2 → [4]
  Only Node 4 exists at this horizontal distance/column.
- HD/col = -1 → [2]
  Only Node 2 exists at this horizontal distance/column.
- HD/col =  0 → [1, 5, 6]
  Nodes present: 1 (row 0), 5 (row 2), 6 (row 2).
  Since 6 and 5 are at the same row, sort them ascending → [5, 6].
  Final order: [1, 5, 6].
- HD/col = +1 → [3]
  Only Node 3 exists at this horizontal distance/column.
- HD/col = +2 → [7]
  Only Node 7 exists at this horizontal distance/column.

Final Vertical View Output:
[ [4], [2], [1, 5, 6], [3], [7] ]
*/


class Solution {
    // Helper class to hold a tree node along with its row and column information
    private static class NodeInfo {
        private TreeNode node;
        private int col; // Horizontal distance from the root (column index)
        private int row; // Depth or level in the tree (row index)

        NodeInfo(TreeNode node, int row, int col) {
            this.node = node;
            this.row = row;
            this.col = col;
        }
    }

    public List<List<Integer>> verticalTraversal(TreeNode root) {
        /*
         * TreeMap is used to store nodes grouped by their column (horizontal distance),
         * and ensures leftmost column comes first in the final result.
         * TreeMap is used to keep the keys (HDs/columns) sorted in ascending order (left to right view).
         * Each key is a column number, and its value is a list of NodeInfo
         * (i.e., all nodes at that column, possibly from different rows).
         */
        Map<Integer, List<NodeInfo>> colToNodesMap = new TreeMap<>();

        /*
         * Use a queue for level order traversal (BFS).
         * We include row and col with each node using NodeInfo.
         */
        Queue<NodeInfo> queue = new ArrayDeque<>();
        queue.offer(new NodeInfo(root, 0, 0)); // Start with root at row=0, col=0

        // Standard BFS to fill the map
        while (!queue.isEmpty()) {
            int size = queue.size();

            while (size-- > 0) {
                NodeInfo nodeInfo = queue.poll();
                TreeNode node = nodeInfo.node;
                int row = nodeInfo.row;
                int col = nodeInfo.col;

                // Group the node into the map based on its column (HD)
                colToNodesMap.computeIfAbsent(col, k -> new ArrayList<>()).add(nodeInfo);

                // Enqueue left child with updated position
                if (node.left != null) {
                    queue.offer(new NodeInfo(node.left, row + 1, col - 1));
                }

                // Enqueue right child with updated position
                if (node.right != null) {
                    queue.offer(new NodeInfo(node.right, row + 1, col + 1));
                }
            }
        }

        /*
        * Now, for each column, we have a list of NodeInfo.
        * Sort them by:
        *   1. If same row, then by node value (ascending).
        *   2. If different row, then by row (ascending).
        *      (Since we performed BFS level-by-level, nodes are already grouped by row.)
        */
        List<List<Integer>> verticalView = new ArrayList<>();
        for (List<NodeInfo> nodesAtCol : colToNodesMap.values()) {
            Collections.sort(nodesAtCol, (a, b) -> {
                if (a.row == b.row) {
                    return Integer.compare(a.node.val, b.node.val); // Same row → sort by value
                }
                return Integer.compare(a.row, b.row); // Otherwise → sort by row 
            });

            // Extract just the node values for final output
            List<Integer> values = nodesAtCol.stream().map(info -> info.node.val).collect(Collectors.toList());

            verticalView.add(values); // Add each vertical slice to result
        }

        return verticalView;
    }
}


//Aliter

class Solution {
    private static class NodeInfo {
        private TreeNode node;
        private int row;
        private int col;

        NodeInfo(TreeNode node, int row, int col) {
            this.node = node;
            this.row = row;
            this.col = col;
        }
    }

    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Map<Integer, PriorityQueue<NodeInfo>> colToNodesMap = new TreeMap<>();

        Queue<NodeInfo> queue = new ArrayDeque<>();
        queue.offer(new NodeInfo(root, 0, 0));

        while (!queue.isEmpty()) {
            int size = queue.size();

            while (size-- > 0) {
                NodeInfo currInfo = queue.poll();
                TreeNode node = currInfo.node;
                int row = currInfo.row;
                int col = currInfo.col;

                colToNodesMap.computeIfAbsent(col, k -> new PriorityQueue<>(
                        (a, b) -> {
                            if (a.row == b.row) {
                                return Integer.compare(a.node.val, b.node.val);
                            }
                            return Integer.compare(a.row, b.row);
                        })).add(currInfo);

                if (node.left != null) {
                    queue.offer(new NodeInfo(node.left, row + 1, col - 1));
                }

                if (node.right != null) {
                    queue.offer(new NodeInfo(node.right, row + 1, col + 1));
                }
            }
        }

        List<List<Integer>> verticalView = new ArrayList<>();
        for (PriorityQueue<NodeInfo> nodesInColumn : colToNodesMap.values()) {
            List<Integer> values = new ArrayList<>();
            while (!nodesInColumn.isEmpty()) {
                values.add(nodesInColumn.poll().node.val);
            }
            verticalView.add(values);
        }

        return verticalView;
    }
}
