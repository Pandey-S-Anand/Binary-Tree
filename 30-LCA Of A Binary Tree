/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */

//Bruteforce approach
 
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Store the paths from root to node p and root to node q
        List<TreeNode> pAncestor = new ArrayList<>();
        List<TreeNode> qAncestor = new ArrayList<>();

        // Find both paths from root to target nodes
        if (!findPath(root, p, pAncestor) || !findPath(root, q, qAncestor)) {
            return null; // Should never happen as p and q are guaranteed to exist
        }

        // Initialize pointer to compare the paths from the back (i.e., from leaf to root) as we want lowest common ancestor
        int i = Math.min(pAncestor.size(), qAncestor.size()) - 1;

        // Move backward in the path lists until the nodes differ
        while (pAncestor.get(i).val != qAncestor.get(i).val) {
            i--;
        }

        // The last common node in the paths is the Lowest Common Ancestor
        return pAncestor.get(i);
    }

    private boolean findPath(TreeNode root, TreeNode target, List<TreeNode> path) {
        // Base case: if the node is null, return false (no path to the target)
        if (root == null) {
            return false;
        }

        // Add the current node to the path
        path.add(root);

        // If we've found the target node, return true
        if (root.val == target.val) {
            return true;
        }

        // Recur for the left and right subtrees to find the target
        if (findPath(root.left, target, path) || findPath(root.right, target, path)) {
            return true;
        }

        // If the current node isn't part of the path to the target, remove it from the path
        path.remove(path.size() - 1);
        return false;
    }
}



//Optimal approach

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // Base case: If root is null, return null (no LCA found in this path)
        if (root == null) {
            return null;
        }

        // If the current node matches either p or q, return it (one of the targets found)
        if (root == p || root == q) {
            return root;
        }

        // Recursively search for p and q in the left and right subtrees
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        /*
         * Case 1: If both recursive calls return non-null values, it means:
         * - p is found in one subtree and q is found in the other.
         * - Hence, the current node (root) is the Lowest Common Ancestor (LCA).
         */
        if (left != null && right != null) {
            return root;
        }

        /*
         * As we are guaranteed that p and q exist, and a node can be a descendant of itself:
         *
         * Case 2:
         * Suppose we are at Node N and p is found in the left subtree of N (i.e., we received p),
         * and q is not found in the right subtree (i.e., we received null).
         * Then q would either be in the left or right subtree of p.
         * In either case, p is the LCA. That's why we return the non-null value i.e., p here (LCA).
         *
         * Case 3:
         * Suppose we are at Node N and q is found in the right subtree (we received q),
         * and p is not found in the left subtree (i.e., we received null).
         * Then p would either be in the left or right subtree of q.
         * In either case, q is the LCA. That's why we return the non-null value i.e., q here (LCA).
         *
         * For example, consider the tree:
         *           3
         *         /   \
         *        5     1
         *       / \   / \
         *      6   2 8   9
         *         / \
         *        7   4
         *
         * p = 5, q = 1       -> 3 is the LCA
         * p = 7, q = 4       -> 2 is the LCA
         * p = 5, q = 6       -> 5 is the LCA
         * p = 5, q = 7       -> 5 is the LCA
         * p = 8, q = 9       -> 1 is the LCA
         * p = 1, q = 8       -> 1 is the LCA
         * p = 1, q = 9       -> 1 is the LCA
         * p = 3, q = 9       -> 3 is the LCA
         * p = 3, q = 8       -> 3 is the LCA
         */

        if (left != null) {
            return left;
        }

        if (right != null) {
            return right;
        }

        // Case 4: If the subtree contains neither p nor q, return null (This should never happen here as we are guaranteed that p and q exist)
        return null;
    }
}
