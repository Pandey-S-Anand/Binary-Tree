/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/*
 * A string (or path in this case) can be rearranged to form a palindrome based on the following conditions:
 * 
 * 1. If the string length is **even**, it can be rearranged into a palindrome
 ** if and only if all characters appear an even number of times**.
 * Example:
 * - "aabbcc" → ✅ Can be rearranged as "abc|cba"
 * - "aaabcc" → ❌ Cannot be rearranged into a palindrome
 * 
 * 2. If the string length is **odd**, it can be rearranged into a palindrome
 ** if and only if exactly one character has an odd frequency**  (all other characters must have even occurrences).
 * Example:
 * - "aabbccd" → ✅ Can be rearranged as "abc|d|cba"
 * - "aaabccd" → ✅ Can be rearranged into a palindrome
 * - "aaabbccd" → ❌ Cannot be rearranged into a palindrome (since 'a' and 'd' both have odd occurrences)
 */

//Bruteforce approach

class Solution {
    private int palindromicPathCount; // Stores the count of pseudo-palindromic paths

    public int pseudoPalindromicPaths(TreeNode root) {
        palindromicPathCount = 0;
        // Start DFS traversal from root with an empty path
        pseudoPalindromicPaths(root, new ArrayList<>());
        return palindromicPathCount;
    }

    private void pseudoPalindromicPaths(TreeNode root, List<Integer> path) {
        if (root == null) {
            return;
        }
        // Include current node value in path
        path.add(root.val);

        // If the current node is a leaf node, check if the path is pseudo-palindromic
        if (isLeafNode(root) && isPalindromicPath(path)) {
            palindromicPathCount++; // Valid pseudo-palindromic path found, increment count
        }

        pseudoPalindromicPaths(root.left, path);
        pseudoPalindromicPaths(root.right, path);
        // Backtrack: Remove the current node from the path before returning to the previous level
        path.remove(path.size() - 1);
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }

    private boolean isPalindromicPath(List<Integer> path) {
        int[] frequencyArray = new int[10]; // Node values are between 1 and 9

        for (int num : path) {
            frequencyArray[num]++;
        }

        boolean oddFreqFound = false;

        for (int num = 1; num < 10; num++) {
            /*
            * - If the path length is even → all digit frequencies must be even.
            * - If the path length is odd → only one digit may have an odd frequency.
            */
            if (frequencyArray[num] % 2 != 0) {
                if (path.size() % 2 == 0 || oddFreqFound) {
                    return false;
                }
                oddFreqFound = true;
            }
        }

        return true;
    }
}

//Better approach

class Solution {
    private int palindromicPathCount;

    public int pseudoPalindromicPaths(TreeNode root) {
        palindromicPathCount = 0;
        pseudoPalindromicPaths(root, new int[10]); // Index 1 to 9 as node values are in range [1, 9]
        return palindromicPathCount;
    }

    private void pseudoPalindromicPaths(TreeNode root, int[] pathFrequency) {
        if (root == null) {
            return;
        }

        pathFrequency[root.val]++;

        if (isLeafNode(root) && isPalindromicPath(pathFrequency)) {
            palindromicPathCount++;
        }

        pseudoPalindromicPaths(root.left, pathFrequency);
        pseudoPalindromicPaths(root.right, pathFrequency);

        pathFrequency[root.val]--;
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }

    private boolean isPalindromicPath(int[] frequencyArray) {
        int oddFreqCount = 0;
        // A path is pseudo-palindromic if at most one digit has an odd frequency
        for (int num = 1; num <= 9; num++) {
            if (frequencyArray[num] % 2 != 0) {
                oddFreqCount++;
                if (oddFreqCount > 1) {
                    return false;
                }
            }
        }

        return true;
    }
}


//Optimal approach (Bit magic)
