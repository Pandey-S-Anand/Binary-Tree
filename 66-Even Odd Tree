/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        boolean isEven = true; // Indicates whether the current level is even-indexed
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            int size = queue.size();
            int previous = isEven ? Integer.MIN_VALUE : Integer.MAX_VALUE; // For order validation

            while (size-- > 0) {
                TreeNode node = queue.poll();

                int value = node.val;

                // Even level: values must be odd and strictly increasing
                if (isEven) {
                    if (value % 2 == 0 || value <= previous) {
                        return false;
                    }
                } else {  // Odd level: values must be even and strictly decreasing
                    if (value % 2 != 0 || value >= previous) {
                        return false;
                    }
                }

                // Enqueue child nodes for next level
                if (node.left != null) {
                    queue.offer(node.left);
                }

                if (node.right != null) {
                    queue.offer(node.right);
                }

                // Update previous for next value comparison
                previous = value;
            }

            // Toggle level flag for next iteration
            isEven = !isEven;
        }

        return true; // All levels satisfy even-odd constraints
    }
}
