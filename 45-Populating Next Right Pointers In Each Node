/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

*/
          1
        /   \ 
       /      \
      /        \
     2           3
    / \         / \
   4   5      6     7
  / \ / \    / \   / \
 8  9 10 11 12 13 14 15
*/

class Solution {
    public Node connect(Node root) {
        if (root == null) {
            return null;
        }

        // Start with the leftmost node of the current level, initially the root
        Node currentLevelStart = root;

        /*
         * We perform a level-order traversal using the 'next' pointers,
         * which we build on-the-fly without using a queue.
         * Since it's a perfect binary tree, every node has either 2 children or none.
         */
        while (currentLevelStart.left != null) {
            // Traverse nodes horizontally across the current level
            Node current = currentLevelStart;

            while (current != null) {
                // Connect the left child to the right child of the same parent
                current.left.next = current.right;

                // Connect right child to the left child of the next subtree (if exists)
                if (current.next != null) {
                    current.right.next = current.next.left;
                }
                // Move to the next subtree in the current level
                current = current.next;
            }
            // Move to the leftmost node of the next level
            currentLevelStart = currentLevelStart.left;
        }

        return root;
    }
}
