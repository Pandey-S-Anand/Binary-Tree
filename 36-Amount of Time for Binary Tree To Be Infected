/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Naive approach

//Naive implementation

class Solution {
    // Map to store parent references for each node
    private Map<Integer, TreeNode> nodeParentMap;

    public int amountOfTime(TreeNode root, int start) {
        nodeParentMap = new HashMap<>();

        /**
         * - The reason we need a parent-child relationship map is that
         *   BFS alone allows us to move downward in the tree (to children).
         * - To also move *upward* (to the parent), we store parent references.
         *   This is necessary because, in addition to moving to the left and right
         *   children, the infection can also spread to a node's parent.
         *   Thus, left, right, and parent nodes are all considered adjacent to any given node.
         */
        // Step 1: Build a map to store parent references for each node
        buildParentMap(root, null);

        // Set to track infected nodes (prevents reinfection)
        Set<Integer> infected = new HashSet<>();

        // Queue for BFS traversal
        Queue<TreeNode> queue = new ArrayDeque<>();
        // Find the node where the infection starts
        TreeNode target = findInfectedNode(root, start);
        // Since the problem guarantees that the start node exists, target will not be null.

        // Start BFS from the target node
        queue.offer(target);
        infected.add(target.val);

        int minute = -1; // Initialize to -1 since the first round represents minute 0
        /**
         * Step 2: Perform BFS
         * In BFS, each level corresponds to one minute of infection spread.
         */
        while (!queue.isEmpty()) {
            int size = queue.size();

            // Process all nodes that are infected in the current minute.
            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();

                // Infect the left child if it exists and hasn't been infected yet.
                if (currentNode.left != null && !infected.contains(currentNode.left.val)) {
                    queue.offer(currentNode.left);
                    infected.add(currentNode.left.val);
                }

                // Infect the right child if it exists and hasn't been infected yet.
                if (currentNode.right != null && !infected.contains(currentNode.right.val)) {
                    queue.offer(currentNode.right);
                    infected.add(currentNode.right.val);
                }

                // Infect the parent node if it exists and hasn't been infected yet.
                TreeNode parentNode = nodeParentMap.get(currentNode.val);
                if (parentNode != null && !infected.contains(parentNode.val)) {
                    queue.offer(parentNode);
                    infected.add(parentNode.val);
                }
            }
            /*
             * After each minute, the nodes present in the queue represent the neighbors of
             * the nodes that were infected in the previous minute. These nodes will become
             * infected in the next minute and will then proceed to spread the infection to
             * their adjacent nodes in the subsequent minutes.
             */

            minute++; // Increment the minute counter after processing one complete level.
        }

        return minute;
    }

    private void buildParentMap(TreeNode currentNode, TreeNode parentNode) {
        if (currentNode == null) {
            return;
        }

        // Store the parent reference for the current node
        nodeParentMap.put(currentNode.val, parentNode);

        // Recurse for the left and right children
        buildParentMap(currentNode.left, currentNode);
        buildParentMap(currentNode.right, currentNode);
    }

    private TreeNode findInfectedNode(TreeNode root, int value) {
        if (root == null) {
            return null;
        }

        if (root.val == value) {
            return root;
        }

        // Search the left subtree.
        TreeNode left = findInfectedNode(root.left, value);

        if (left != null) {
            return left;
        }

        // If not found in the left, search the right subtree.
        return findInfectedNode(root.right, value);
    }
}


//Optimal implementation

class Solution {
    private Map<Integer, TreeNode> nodeParentMap;
    private TreeNode target;

    public int amountOfTime(TreeNode root, int start) {
        nodeParentMap = new HashMap<>();
        // During the construction of the parent map, we also locate the target node.
        buildParentMap(root, null, start);

        Set<Integer> infected = new HashSet<>();
        Queue<TreeNode> queue = new ArrayDeque<>();

        queue.offer(target);
        infected.add(target.val);

        int minute = -1;

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();

                if (currentNode.left != null && !infected.contains(currentNode.left.val)) {
                    queue.offer(currentNode.left);
                    infected.add(currentNode.left.val);
                }

                if (currentNode.right != null && !infected.contains(currentNode.right.val)) {
                    queue.offer(currentNode.right);
                    infected.add(currentNode.right.val);
                }

                TreeNode parentNode = nodeParentMap.get(currentNode.val);
                if (parentNode != null && !infected.contains(parentNode.val)) {
                    queue.offer(parentNode);
                    infected.add(parentNode.val);
                }
            }

            minute++;
        }

        return minute;
    }

    private void buildParentMap(TreeNode currentNode, TreeNode parentNode, int start) {
        if (currentNode == null) {
            return;
        }

        // While building the parent map, check if the current node is the target node
        if (currentNode.val == start) {
            target = currentNode;  // Set the target node during the parent map creation
        }

        nodeParentMap.put(currentNode.val, parentNode);

        buildParentMap(currentNode.left, currentNode, start);
        buildParentMap(currentNode.right, currentNode, start);
    }
}


//Optimal approach (Without using parent map)

/*
    **Tree Structure:**
           8
          / \
         1   7
       /   \
      5     3
       \    / \
        4  10  6
       / \    
      9   2   

    **Understanding the Problem:**
    - The amount of time required to infect the entire binary tree is equal to the maximum distance 
      between the infected node and the farthest leaf node.
    - So, our goal is to find the distance between the farthest leaf node and the start node (infected node).

    **How the Algorithm Works:**
    - A call is made at node 8, checking both left (1) and right (7) subtrees.
    - A call at node 1 explores its left (5) and right (3) subtrees.
    - The left subtree rooted at node 5 returns 3, indicating its depth.
    - The right subtree call at node 3 explores its left (10) and right (6) subtrees, both returning 1 as their depth.
    - Since node 3 is the infection source, `maxDistance` is updated to `max(1, 1) = 1`. 
      This means that, currently, the farthest leaf node from the infected node is at a distance of 1.
    - Node 3 then returns `-1` to its parent (node 1), signaling that the infection was found in its right subtree.
      This `abs(-1)` represents the distance from node 1 to the infected node 3.
    - At node 1, `maxDistance` is updated again: `max(1, 3 + abs(-1)) = 4`. 
      This means that the farthest leaf node (which is either 9 or 2) is at a distance of **4** from the infected node.
    - The depth returned to node 8 is `-2`, meaning node 8 is 2 steps away from the infected node.
    - The right subtree of node 8 returns depth 1.
    - The final `maxDistance` remains **4**, representing the longest time for the infection to reach the farthest node.
    
    **Burning Process Over Time (Minute-wise Spread of Infection):**
    
    - **Minute 0**: Node **3** is infected.
    - **Minute 1**: Nodes **10, 6, and 1** get infected (children and parent of node 3).
    - **Minute 2**: Nodes **5 and 8** get infected (parent of 1 and child of 5).
    - **Minute 3**: Nodes **4 and 7** get infected (child of 5 and right child of 8).
    - **Minute 4**: Nodes **9 and 2** get infected (children of 4).
    
    **Final Result:**
    - **4** (time taken for the infection to spread to the farthest node).
*/


class Solution {
    // maxDistance keeps track of the maximum distance from the infected node  to the farthest leaf node encountered so far.
    private int maxDistance = 0;

    public int amountOfTime(TreeNode root, int start) {
        findMaxInfectionTime(root, start);
        return maxDistance;
    }

    private int findMaxInfectionTime(TreeNode root, int start) {
        if (root == null) {
            return 0;
        }

        int depth = 0;
        int leftDepth = findMaxInfectionTime(root.left, start);
        int rightDepth = findMaxInfectionTime(root.right, start);

        if (root.val == start) {
            // If the current node is the infected node, update maxDistance with the maximum depth of its left or right subtree.
            maxDistance = Math.max(leftDepth, rightDepth);
            depth = -1;
            /*
             We return a negative value to indicate to the parent node that the infection 
             has been found in the subtree. This depth value represents the distance 
             of the parent node from the infected node.
            */
        } else if (leftDepth >= 0 && rightDepth >= 0) {
            // If neither the left nor the right subtree contains the infected node, return the depth of the current subtree.
            depth = Math.max(leftDepth, rightDepth) + 1;
        } else if (leftDepth < 0) {
            // If the left subtree contains the infected node:
            int distance = Math.abs(leftDepth) + rightDepth;
            maxDistance = Math.max(maxDistance, distance);
            // Decrease depth further (by -1) to indicate how far the immediate ancestor is from the infected node.
            depth = leftDepth - 1;
        } else {
            // If the right subtree contains the infected node:
            int distance = leftDepth + Math.abs(rightDepth);
            maxDistance = Math.max(maxDistance, distance);
            // Decrease depth further (by -1) to indicate how far the immediate ancestor is from the infected node.
            depth = rightDepth - 1;
        }

        return depth;
    }
}
