/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private int maxDiff;

    /**
     * Why do we compute only the max and min values along a path?
     * ------------------------------------------------------------
     * - For a node to be an ancestor of another, both must exist on the same root-to-leaf path.
     * - Therefore, any valid ancestor–descendant pair must lie within a single traversal path.
     * - By tracking all node values along the current DFS path, we ensure all potential ancestor relationships are captured.
     * - The maximum difference between an ancestor and its descendant within a path is simply:
     *       max(path) - min(path)
     *
     * Hence, for every root-to-leaf path, we compute this difference and update a global maximum
     * to find the largest possible difference across all such paths.
     */
    public int maxAncestorDiff(TreeNode root) {
        maxDiff = Integer.MIN_VALUE;
        // Start DFS traversal with an empty path to record values from root to current node
        maxAncestorDiff(root, new ArrayList<>());
        return maxDiff;
    }

    private void maxAncestorDiff(TreeNode root, List<Integer> path) {
        if (root == null) {
            return;
        }
        // Add current node's value to the path
        path.add(root.val);

        if (isLeafNode(root)) {
            // If it's a leaf node, compute min and max along the path and update maxDiff
            int maxPathDiff = Collections.max(path) - Collections.min(path);
            maxDiff = Math.max(maxDiff, maxPathDiff);
        }
        // Recur for left and right subtree
        maxAncestorDiff(root.left, path);
        maxAncestorDiff(root.right, path);

        // Backtrack: remove current node value from path before returning to parent
        path.remove(path.size() - 1);
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}



//Optimal approach

class Solution {
    private int maxDiff;

    public int maxAncestorDiff(TreeNode root) {
        maxDiff = Integer.MIN_VALUE;

        /**
         * We begin a depth-first search (DFS) from the root.
         * Instead of tracking the full path as a list, we only track:
         * - The minimum value seen so far on the path.
         * - The maximum value seen so far on the path.
         *
         * This is sufficient because:
         * ------------------------------------------------------------
         * - For a node to be an ancestor of another, both must lie on the same root-to-leaf path.
         * - So, any valid ancestor–descendant pair must exist within one DFS traversal path.
         * - Tracking only the min and max seen so far along that path ensures:
         *     maxDifference = maxInPath - minInPath
         * - This reduces extra space usage compared to storing the full path.
         */
        maxAncestorDiff(root, Integer.MAX_VALUE, Integer.MIN_VALUE);
        return maxDiff;
    }

    private void maxAncestorDiff(TreeNode root, int minInPath, int maxInPath) {
        if (root == null) {
            return;
        }

        // Update min and max seen so far in this DFS path
        minInPath = Math.min(minInPath, root.val);
        maxInPath = Math.max(maxInPath, root.val);

        // If we reach a leaf, calculate the max difference for this path
        if (isLeafNode(root)) {
            int maxPathDiff = maxInPath - minInPath;
            maxDiff = Math.max(maxDiff, maxPathDiff);
        }

        // Continue DFS traversal to left and right children
        maxAncestorDiff(root.left, minInPath, maxInPath);
        maxAncestorDiff(root.right, minInPath, maxInPath);
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}
