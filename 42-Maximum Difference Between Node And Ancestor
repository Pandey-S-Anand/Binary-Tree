/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private List<List<Integer>> paths;

    public int maxAncestorDiff(TreeNode root) {
        paths = new ArrayList<>();
        // Collect all paths from the root to every leaf in the tree.
        getAllPaths(root, new ArrayList<>());
        // Variable to keep track of the maximum difference found across all paths.
        int maxDifference = 0;
        // Iterate through each path to compute the difference between the minimum and maximum values in the path.
        for (List<Integer> path : paths) {
            maxDifference = Math.max(maxDifference, getPathMaxDifference(path));
        }

        return maxDifference;
    }

    private void getAllPaths(TreeNode root, List<Integer> currentPath) {
        if (root == null) {
            return;
        }

        currentPath.add(root.val);

        if (root.left == null && root.right == null) {
            paths.add(new ArrayList<>(currentPath));
            currentPath.remove(currentPath.size() - 1);
            return;
        }

        getAllPaths(root.left, currentPath);
        getAllPaths(root.right, currentPath);

        currentPath.remove(currentPath.size() - 1);
    }

    private int getPathMaxDifference(List<Integer> path) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;

        // Iterate through each number in the path.
        for (int num : path) {
            // Update the minimum value if a smaller value is found.
            if (num < min) {
                min = num;
            }
            // Update the maximum value if a larger value is found.
            if (num > max) {
                max = num;
            }
        }

        // The maximum difference for this path is the difference between max and min.
        return max - min;
    }
}

//Optimal approach

class Solution {
    // Variable to store the maximum difference found between any ancestor and descendant.
    private int maxDifference;

    public int maxAncestorDiff(TreeNode root) {
        maxDifference = 0;
        findMaxDifferenceAcrossAllPaths(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
        return maxDifference;
    }

    private void findMaxDifferenceAcrossAllPaths(TreeNode root, int maxInPath, int minInPath) {
        if (root == null) {
            return;
        }

        // Update the current maximum and minimum values with the current node's value.
        maxInPath = Math.max(maxInPath, root.val);
        minInPath = Math.min(minInPath, root.val);

        // If the current node is a leaf, update the maxDifference using the current path's difference.
        if (root.left == null && root.right == null) {
            int currentPathMaxDifference = maxInPath - minInPath;
            maxDifference = Math.max(maxDifference, currentPathMaxDifference);
            return;
        }

        // Recursively traverse the left and right subtrees.
        findMaxDifferenceAcrossAllPaths(root.left, maxInPath, minInPath);
        findMaxDifferenceAcrossAllPaths(root.right, maxInPath, minInPath);
    }
}
