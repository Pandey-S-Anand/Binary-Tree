
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    // Map to store parent references for each node in the tree
    private Map<Integer, TreeNode> nodeParentMap;

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        nodeParentMap = new HashMap<>();

        /**
         * Why do we need parent references?
         * -----------------------------------
         * - In a binary tree, we can move to child nodes directly from a parent,
         *   but there's no direct way to move back to the parent.
         * - To support upward traversal (towards ancestors) during BFS from the target node,
         *   we record parent references for each node beforehand.
         */
        //Build a mapping from each node to its parent.
        buildParentMap(root, null);

        // Set to track visited nodes to avoid revisiting them during BFS
        Set<Integer> visited = new HashSet<>();

        // Queue to perform level-order traversal (BFS)
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(target); // Start from the target node
        visited.add(target.val); // Mark target as visited

        /**
         * Perform BFS from the target node up to k levels.
         * - After 1 level, queue contains nodes at distance 1 from the target
         * - After 2 levels, queue contains nodes at distance 2
         * - Continue this until k becomes 0
         */
        while (!queue.isEmpty() && k > 0) {
            int size = queue.size(); // Number of nodes at the current level

            while (size-- > 0) {
                TreeNode currentNode = queue.poll();

                // Traverse left child if exists and unvisited
                if (currentNode.left != null && !visited.contains(currentNode.left.val)) {
                    queue.offer(currentNode.left);
                    visited.add(currentNode.left.val);
                }

                // Traverse right child if exists and unvisited
                if (currentNode.right != null && !visited.contains(currentNode.right.val)) {
                    queue.offer(currentNode.right);
                    visited.add(currentNode.right.val);
                }

                // Traverse parent if exists and unvisited
                TreeNode parentNode = nodeParentMap.get(currentNode.val);
                if (parentNode != null && !visited.contains(parentNode.val)) {
                    queue.offer(parentNode);
                    visited.add(parentNode.val);
                }
            }

            // Move to next level in BFS
            k--;
        }

        // At this point, queue contains all nodes at distance 'k' from the target
        List<Integer> kDistanceNodes = new ArrayList<>();
        while (!queue.isEmpty()) {
            kDistanceNodes.add(queue.poll().val);
        }

        return kDistanceNodes;
    }

    private void buildParentMap(TreeNode currentNode, TreeNode parentNode) {
        if (currentNode == null) {
            return;
        }

        nodeParentMap.put(currentNode.val, parentNode);

        buildParentMap(currentNode.left, currentNode);
        buildParentMap(currentNode.right, currentNode);
    }
}
