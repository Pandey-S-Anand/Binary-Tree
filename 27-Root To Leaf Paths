class Solution {
    // List to store all root-to-leaf paths
    private static ArrayList<ArrayList<Integer>> paths;

    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        paths = new ArrayList<>();
        getAllPaths(root, new ArrayList<>());
        return paths;
    }

    private static void getAllPaths(Node root, List<Integer> path) {
        // Base case: If the node is null, return immediately
        if (root == null) {
            return;
        }

        // Add the current node's value to the path
        path.add(root.data);

        // If this is a leaf node, add the current path to the paths list
        if (isLeafNode(root)) {
            paths.add(new ArrayList<>(path));
            path.remove(path.size() - 1); // Backtrack to explore other paths
            return;
        }

        // Recursively explore the left and right subtrees
        getAllPaths(root.left, path);
        getAllPaths(root.right, path);
        // Backtrack: Remove the current node from the path before returning to the previous level
        path.remove(path.size() - 1);
    }

    private static boolean isLeafNode(Node node) {
        return node.left == null && node.right == null;
    }
}
