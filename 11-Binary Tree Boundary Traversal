class Solution {
    // List to store the final boundary traversal
    private ArrayList<Integer> boundaryTraversal;

    // Main function to perform boundary traversal
    ArrayList<Integer> boundaryTraversal(Node root) {
        boundaryTraversal = new ArrayList<>();

        // Add the root node only if it's not a leaf
        if (!isLeafNode(root)) {
            boundaryTraversal.add(root.data);
        }

        // Traverse the left boundary excluding leaf nodes
        traverseLeftBoundary(root.left);

        // Add all the leaf nodes from left to right
        traverseLeafNodes(root);

        // Traverse the right boundary excluding leaf nodes (added in reverse order)
        traverseRightBoundary(root.right);

        return boundaryTraversal;
    }

    // Traverse the left boundary (excluding leaf nodes)
    private void traverseLeftBoundary(Node node) {
        if (node == null) {
            return;
        }

        Node currentNode = node;

        // Continue until a leaf node is encountered
        while (!isLeafNode(currentNode)) {
            boundaryTraversal.add(currentNode.data);

            // Prefer going left; if not possible, go right
            if (currentNode.left != null) {
                currentNode = currentNode.left;
            } else {
                currentNode = currentNode.right;
            }
        }
    }

    // Traverse the right boundary (excluding leaf nodes), add them in reverse order
    private void traverseRightBoundary(Node node) {
        if (node == null) {
            return;
        }

        Node currentNode = node;
        Deque<Integer> stack = new ArrayDeque<>();

        // Store the nodes in a stack to reverse the order later
        while (!isLeafNode(currentNode)) {
            stack.push(currentNode.data);

            // Prefer going right; if not possible, go left
            if (currentNode.right != null) {
                currentNode = currentNode.right;
            } else {
                currentNode = currentNode.left;
            }
        }

        // Add the right boundary nodes in reverse order
        while (!stack.isEmpty()) {
            boundaryTraversal.add(stack.pop());
        }
    }

    // Recursively add all the leaf nodes from left to right
    private void traverseLeafNodes(Node root) {
        if (root == null) {
            return;
        }

        // If it's a leaf node, add it to the list
        if (isLeafNode(root)) {
            boundaryTraversal.add(root.data);
            return;
        }

        // Recurse into left and right subtrees
        traverseLeafNodes(root.left);
        traverseLeafNodes(root.right);
    }

    // Helper function to check if a node is a leaf node
    private boolean isLeafNode(Node node) {
        return node.left == null && node.right == null;
    }
}


//Aliter 


class Solution {
    private ArrayList<Integer> boundaryTraversal;

    ArrayList<Integer> boundaryTraversal(Node root) {
        boundaryTraversal = new ArrayList<>();

        if (root == null) return boundaryTraversal;

        if (!isLeafNode(root)) {
            boundaryTraversal.add(root.data);
        }

        // Traverse left boundary excluding leaves
        traverseLeftBoundary(root.left);

        traverseLeafNodes(root);

        traverseRightBoundary(root.right);

        return boundaryTraversal;
    }

    private void traverseLeftBoundary(Node node) {
        if (node == null) return;

        Node currentNode = node;
        while (!isLeafNode(currentNode)) {
            boundaryTraversal.add(currentNode.data);
            if (currentNode.left != null) {
                currentNode = currentNode.left;
            } else {
                currentNode = currentNode.right;
            }
        }
    }

    private void traverseRightBoundary(Node node) {
        if (node == null) return;

        Node currentNode = node;
        LinkedList<Integer> reversedRightBoundary = new LinkedList<>();

        while (!isLeafNode(currentNode)) {
            reversedRightBoundary.offerFirst(currentNode.data);  // Add to front to maintain reverse order
            if (currentNode.right != null) {
                currentNode = currentNode.right;
            } else {
                currentNode = currentNode.left;
            }
        }

        boundaryTraversal.addAll(reversedRightBoundary);
    }

    private void traverseLeafNodes(Node root) {
        if (root == null) return;

        if (isLeafNode(root)) {
            boundaryTraversal.add(root.data);
            return;
        }

        traverseLeafNodes(root.left);
        traverseLeafNodes(root.right);
    }

    private boolean isLeafNode(Node node) {
        return node.left == null && node.right == null;
    }
}
