/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Recursive approach

class Solution {
    public int maxDepth(TreeNode root) {
        // Base case: if the tree is empty, depth is 0
        if (root == null) {
            return 0;
        }

        // Recursively compute the depth of the left and right subtrees
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);

        // The maximum depth is the greater of the two depths plus one (for the current node)
        return 1 + Math.max(leftDepth, rightDepth);
    }
}


//Iterative approach

class Solution {
    public int maxDepth(TreeNode root) {
       // If the tree is empty, depth is 0
        if (root == null) {
            return 0;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int depth = 0;

        // Perform level-order traversal
        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int size = queue.size();
            depth++; // Increase depth at each level

            // Process all nodes at the current level
            for (int i = 0; i < size; i++) {
                TreeNode current = queue.poll();
                
                // Add child nodes to the queue
                if (current.left != null) {
                    queue.offer(current.left);
                }
                if (current.right != null) {
                    queue.offer(current.right);
                }
            }
        }

        return depth;
    }
}
