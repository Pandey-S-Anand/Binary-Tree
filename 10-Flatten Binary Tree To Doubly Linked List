//Bruteforce approach

class Solution {
    // List to hold nodes in inorder sequence
    private List<Node> inorder;

    Node bToDLL(Node root) {
        inorder = new ArrayList<>();

        // Populate the inorder list using in-order traversal
        collectNodesInInorder(root);

        // Link nodes to form doubly linked list
        for (int i = 1; i < inorder.size(); i++) {
            Node prevNode = inorder.get(i - 1);
            Node currentNode = inorder.get(i);

            // Set the right pointer of the previous node to the current node
            prevNode.right = currentNode;

            // Set the left pointer of the current node to the previous node
            currentNode.left = prevNode;
        }

        // Head of the doubly linked list will be the first node in inorder traversal
        return inorder.get(0);
    }

    private void collectNodesInInorder(Node root) {
        if (root == null) {
            return;
        }

        collectNodesInInorder(root.left);   
        inorder.add(root);                 
        collectNodesInInorder(root.right); 
    }
}



//Better approach

class Solution {
    private Node head;      // Will point to the head of the doubly linked list
    private Node prevNode;  // Pointer to the last linked node during inorder traversal

    Node bToDLL(Node root) {
        head = prevNode = null;  // Initialize pointers
        flattenToDLLInorder(root);  // Perform in-place inorder traversal and linking
        return head;  // Return the head of the constructed DLL
    }

    private void flattenToDLLInorder(Node root) {
        if (root == null) {
            return;
        }

        // Traverse left subtree
        flattenToDLLInorder(root.left);

        // Process current node:
        // If there's a last linked node , link it with the current node
        if (prevNode != null) {
            prevNode.right = root;  // Link previous node's right to current
            root.left = prevNode;   // Link current node's left to previous
        }

        // Update prevNode to the current node
        prevNode = root;

        // If head hasn't been set yet, set it to the leftmost node (first in inorder)
        if (head == null) {
            head = root;
        }

        // Traverse right subtree
        flattenToDLLInorder(root.right);
    }
}



//Optimal approach

/*
Dry Run for the tree:

Input Tree:
        1
       / \
      2   5
     / \   \
    3   4   6

Step-by-Step:

1. Start at node 1:
   - 1 has left child 2, so find the rightmost node in left subtree (4).
   - 4.right = 1 (current node).
   - Move to the left subtree (2) and , set 1.left = null.
   Tree becomes:

          2
         / \
        3   4
             \
              1
               \
                5
                 \
                  6
                

2. Start at node 2:
   - 2 has left child 3, so find the rightmost node in left subtree (3).
   - 3.right = 2 (current node).
   - Move to the left subtree (3) and set 2.left = null.
   
   Tree becomes:
        3
         \
          2
           \
            4
             \
              1
               \
                5
                 \
                  6

3. Start at node 3:
   - 3 has no left child.
    since previous == null hence set head = current i.e 3
    and update previous = current i.e 3
   - Move to right of 3 i.e 2.

4. Start at node 2:
   - 2 has no left child.
      prevNode.right = current; i.e set right of 3 = 2
      current.left = prevNode; i.e set left of 2 = 3
      prevNode = current; i.e previous = 2
   - Move to right of 2 i.e 4
   
     3 <-> 2
      

5. Start at node 4:
    - 4 has no left child.
      prevNode.right = current; i.e set right of 2 = 4
      current.left = prevNode; i.e set left of 4 = 2
      prevNode = current; i.e previous = 4
   - Move to right of 4 i.e 1.
   
     3 <-> 2 

6. Start at node 1:
   - 1 has no left child.
      prevNode.right = current; i.e set right of 4 = `1`
      current.left = prevNode; i.e set left of 1 = 4
      prevNode = current; i.e previous = 1
   - Move to right of 1 i.e 5.
   
     3 <-> 2 <-> 4 <-> 1
   
   
7. - 5 has no left child.
      prevNode.right = current; i.e set right of 1 = `5`
      current.left = prevNode; i.e set left of 5 = 1
      prevNode = current; i.e previous = 5
   - Move to right of 5 i.e 6.
   
     3 <-> 2 <-> 4 <-> 1 <-> 5
   
   
8. - 6 has no left child.
      prevNode.right = current; i.e set right of 5 = `6`
      current.left = prevNode; i.e set left of 6 = 5
      prevNode = current; i.e previous = 6
   - Move to right of 6 i.e null.
   
     3 <-> 2 <-> 4 <-> 1 <-> 5 <-> 6

Final Flattened Binary Tree:
3 <-> 2 <-> 4 <-> 1 <-> 5 <-> 6
*/


class Solution {
    // Utility class to help build the doubly linked list during traversal
    private static class NodeBuilder {
        private Node head; // Head of the constructed DLL
        private Node tail; // Tail of the constructed DLL

        NodeBuilder() {
            head = tail = null;
        }

        // Appends a node to the tail of the doubly linked list
        private void append(Node node) {
            if (head == null) {
                head = tail = node; // First node becomes both head and tail
            } else {
                tail.right = node;  // Link current tail to new node
                node.left = tail;   // Link new node back to current tail
                tail = node;        // Move tail to the new last node
            }
        }
    }

    Node bToDLL(Node root) {
        NodeBuilder dll = new NodeBuilder(); // DLL builder to keep track of head and tail
        Node currentNode = root;

        // Morris Inorder Traversal
        while (currentNode != null) {
            if (currentNode.left == null) {
                // If no left child, visit the node and move right
                dll.append(currentNode);
                currentNode = currentNode.right;
            } else {
                // Case 2: If left subtree exists, find the rightmost node in the left subtree
                Node rightMostNode = currentNode.left;

                while (rightMostNode.right != null) {
                    rightMostNode = rightMostNode.right;
                }

               // Create a temporary thread from the rightmost node to the current node to return to currentNode later
                rightMostNode.right = currentNode;

                // Store current node and move to left child
                Node temp = currentNode;
                currentNode = currentNode.left;

                // Remove the left link to avoid infinite loops
                temp.left = null;
            }
        }

        // Return the head of the formed doubly linked list
        return dll.head;
    }
}
