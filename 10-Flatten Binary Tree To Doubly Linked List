//Bruteforce approach

class Solution {
    private List<Node> inorderTraversal;

    Node bToDLL(Node root) {
        inorderTraversal = new ArrayList<>();
        findInorderTraversal(root); // Perform inorder traversal and store nodes in the list

        Node prevNode = inorderTraversal.get(0); // The first node in the inorder list is the head of DLL

        // Iterate through the inorder list and link nodes to form a doubly linked list
        for (int i = 1; i < inorderTraversal.size(); i++) {
            Node currentNode = inorderTraversal.get(i);
            currentNode.left = prevNode; // Set left pointer to previous node
            prevNode.right = currentNode; // Set right pointer of previous node to current node
            prevNode = currentNode; // Move prevNode to the current node for next iteration
        }

        return inorderTraversal.get(0); // Return the head of the DLL
    }

    private void findInorderTraversal(Node root) {
        if (root == null) {
            return;
        }

        findInorderTraversal(root.left);
        inorderTraversal.add(root);
        findInorderTraversal(root.right);
    }
}



//Better approach

class Solution {
    private Node head; // Head of the Doubly Linked List
    private Node prevNode; // Pointer to track the previous node in DLL

    Node bToDLL(Node root) {
        head = prevNode = null;

        // Perform inorder traversal and convert the tree into a DLL
        findInorderTraversal(root);

        // Return the head of the DLL
        return head;
    }

    private void findInorderTraversal(Node root) {
        if (root == null) {
            return; // Base case: Stop if the node is null
        }

        // Recur on the left subtree
        findInorderTraversal(root.left);

        if (prevNode == null) { // This condition is true for the first (leftmost) node in inorder traversal
            root.left = null; // Not strictly necessary, as the leftmost node already has left = null
            head = root; // The first node encountered becomes the head of the DLL
        } else {
            root.left = prevNode; // Current node's left points to previous node
            prevNode.right = root; // Previous node's right points to current node
        }

        // Move the prevNode pointer to the current node
        prevNode = root;

        // Recur on the right subtree
        findInorderTraversal(root.right);
    }
}



//Optimal approach

/*
Dry Run for the tree:

Input Tree:
        1
       / \
      2   5
     / \   \
    3   4   6

Step-by-Step:

1. Start at node 1:
   - 1 has left child 2, so find the rightmost node in left subtree (4).
   - 4.right = 1 (current node).
   - Move to the left subtree (2) and , set 1.left = null.
   Tree becomes:

          2
         / \
        3   4
             \
              1
               \
                5
                 \
                  6
                

2. Start at node 2:
   - 2 has left child 3, so find the rightmost node in left subtree (3).
   - 3.right = 2 (current node).
   - Move to the left subtree (3) and set 2.left = null.
   
   Tree becomes:
        3
         \
          2
           \
            4
             \
              1
               \
                5
                 \
                  6

3. Start at node 3:
   - 3 has no left child.
    since previous == null hence set head = current i.e 3
    and update previous = current i.e 3
   - Move to right of 3 i.e 2.

4. Start at node 2:
   - 2 has no left child.
      prevNode.right = current; i.e set right of 3 = 2
      current.left = prevNode; i.e set left of 2 = 3
      prevNode = current; i.e previous = 2
   - Move to right of 2 i.e 4
   
     3 <-> 2
      

5. Start at node 4:
    - 4 has no left child.
      prevNode.right = current; i.e set right of 2 = 4
      current.left = prevNode; i.e set left of 4 = 2
      prevNode = current; i.e previous = 4
   - Move to right of 4 i.e 1.
   
     3 <-> 2 

6. Start at node 1:
   - 1 has no left child.
      prevNode.right = current; i.e set right of 4 = `1`
      current.left = prevNode; i.e set left of 1 = 4
      prevNode = current; i.e previous = 1
   - Move to right of 1 i.e 5.
   
     3 <-> 2 <-> 4 <-> 1
   
   
7. - 5 has no left child.
      prevNode.right = current; i.e set right of 1 = `5`
      current.left = prevNode; i.e set left of 5 = 1
      prevNode = current; i.e previous = 5
   - Move to right of 5 i.e 6.
   
     3 <-> 2 <-> 4 <-> 1 <-> 5
   
   
8. - 6 has no left child.
      prevNode.right = current; i.e set right of 5 = `6`
      current.left = prevNode; i.e set left of 6 = 5
      prevNode = current; i.e previous = 6
   - Move to right of 6 i.e null.
   
     3 <-> 2 <-> 4 <-> 1 <-> 5 <-> 6

Final Flattened Tree:
3 <-> 2 <-> 4 <-> 1 <-> 5 <-> 6
*/


class Solution {
    private Node head = null; // Head of the Doubly Linked List
    private Node prevNode = null; // Tracks the previous node in DLL

    Node bToDLL(Node root) {
        if (root == null) {
            return null;
        }

        Node current = root;

        while (current != null) {
            // Case 1: If there is no left subtree, process the node and move right
            if (current.left == null) {
                processNode(current)  // Process the current node
                current = current.right;// Move to the right subtree
            } else {
                // Case 2: If left subtree exists, find the rightmost node in the left subtree
                Node rightmost = current.left;

                // Move to the rightmost node in the left subtree
                while (rightmost.right != null) {
                    rightmost = rightmost.right;
                }

                // Create a temporary thread from the rightmost node to the current node
                rightmost.right = current;
                Node temp = current;  // Store current node reference
                current = current.left;   // Move current to its left subtree

                // Remove the left link to avoid infinite loops
                temp.left = null;
            }
        }


        return head; // Return the head of the DLL
    }

    private void processNode(Node current) {
        if (prevNode == null) {
            head = current; // First node is the head of DLL
        } else {
            prevNode.right = current;
            current.left = prevNode;
        }
        prevNode = current;
    }
}
