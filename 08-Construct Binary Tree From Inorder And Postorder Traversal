/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {

    private int postorderIndex; // Index tracking the current root node in the postorder array
    private Map<Integer, Integer> inorderIndexMap; // Maps node values to their indices in the inorder array for O(1) access

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        // Start from the last index in postorder, since root is the last node in postorder traversal
        postorderIndex = postorder.length - 1;

        // Build a hashmap to quickly lookup the index of any value in inorder array
        inorderIndexMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderIndexMap.put(inorder[i], i);
        }

        // Construct the tree from postorder and inorder arrays
        return constructTree(postorder, 0, inorder.length - 1);
    }

    private TreeNode constructTree(int[] postorder, int inorderStart, int inorderEnd) {
        // Base condition: no elements to construct the subtree
        if (inorderStart > inorderEnd) {
            return null;
        }

        // The current root node is the last unprocessed element in postorder array
        int rootValue = postorder[postorderIndex--];
        TreeNode root = new TreeNode(rootValue);

        // Find the index of this root node in inorder array
        int inorderIndex = inorderIndexMap.get(rootValue);

        /*
         * IMPORTANT: Recurse on right subtree BEFORE left subtree.
         * Why? In postorder: Left → Right → Root. When processing in reverse: Root → Right → Left.
         * So after consuming the root, next comes the right child, then the left child.
         */
        root.right = constructTree(postorder, inorderIndex + 1, inorderEnd); // Build right subtree first
        root.left = constructTree(postorder, inorderStart, inorderIndex - 1); // Then build left subtree

        return root; // Return the constructed subtree rooted at 'root'
    }
}
