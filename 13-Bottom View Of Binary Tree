/*
         10 (0)
       /       \
    20 (-1)    30 (+1)
    /    \
 40 (-2)  60 (0)

----------------------------
Bottom View of the Binary Tree:
----------------------------

Nodes at Each Horizontal Distance (HD):
- HD = -2 → Node 40
- HD = -1 → Node 20
- HD =  0 → Node 60 (Replaces 10, as it is at a lower level)
- HD = +1 → Node 30

Bottom View (Left to Right based on HD):
[40, 20, 60, 30]

Explanation:
- 40 is the only node at HD = -2.
- 20 is the lowest node at HD = -1.
- 60 is lower than 10 at HD = 0, so we take 60.
- 30 is the only node at HD = +1.
*/


class Solution{
    // Pair class to store a node and its horizontal distance (hd) from the root
    private static class Pair {
        Node node;
        int hd; // horizontal distance from root
        
        Pair(Node node, int hd) {
            this.node = node;
            this.hd = hd;
        }
    }
    
    public ArrayList <Integer> bottomView(Node root){
         // If the tree is empty, return an empty list
        if (root == null) {
            return new ArrayList<>();
        }

        // Map to store the last / bottom node at each horizontal distance
        // TreeMap is used to keep keys (horizontal distances) in sorted order
        Map<Integer, Integer> map = new TreeMap<>();

        // Queue for level order traversal, stores pairs of node and its horizontal distance
        Queue<Pair> queue = new ArrayDeque<>();
        
        // Start by adding the root node with horizontal distance 0
        queue.offer(new Pair(root, 0));

        // Perform level order traversal
        while (!queue.isEmpty()) {
            int size = queue.size();

            // Traverse nodes at the current level
            for (int i = 0; i < size; i++) {
                // Extract the front node and its horizontal distance
                Pair pair = queue.poll();
                Node node = pair.node;
                int hd = pair.hd;

                // Update the node value for this HD (bottom-most node at each HD)
                // Since we traverse level by level, the last encountered node at each HD will be the bottom-most node.
                map.put(hd, node.data);

                // Add the left child to the queue with updated horizontal distance (hd - 1)
                if (node.left != null) {
                    queue.offer(new Pair(node.left, hd - 1));
                }

                // Add the right child to the queue with updated horizontal distance (hd + 1)
                if (node.right != null) {
                    queue.offer(new Pair(node.right, hd + 1));
                }
            }
        }

        // Prepare the top view from the map by retrieving all values
        ArrayList<Integer> topView = new ArrayList<>();
        for (int value : map.values()) {
            topView.add(value);
        }

        return topView;
    }
}
