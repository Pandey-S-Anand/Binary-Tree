/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */


//Recursive approach

class Solution {
    public boolean isSymmetric(TreeNode root) {
        // Check if the left and right subtrees are mirror images of each other
        return isMirror(root.left, root.right);
    }

    private boolean isMirror(TreeNode left, TreeNode right) {
        // If both subtrees are null, they are symmetric
        if (left == null && right == null) {
            return true;
        }

        // If only one of them is null, they are not symmetric
        if (left == null || right == null) {
            return false;
        }

        // Check if the values are equal and the subtrees are symmetric  (left subtree's left child with right subtree's right child and vice versa)
        return left.val == right.val && isMirror(left.left, right.right) && isMirror(left.right, right.left);
    }
}

//Concise implementation

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isMirror(root.left, root.right);
    }

    private boolean isMirror(TreeNode left, TreeNode right) {
        if (left == null || right == null) {
            // If both subtrees are null, they are symmetric otherwise if only one of them is null, they are not symmetric
            return left==right;
        }

        return left.val == right.val && isMirror(left.left, right.right) && isMirror(left.right, right.left);
    }
}


//Iterative approach

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;

        // Use a queue to compare nodes in pairs, utilizing LinkedList to allow null values
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);

        while (!queue.isEmpty()) {
            // Retrieve two nodes for comparison 
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();

            // If both nodes are null, continue to the next pair
            if (left == null && right == null) continue;

            // If one node is null or their values differ, the tree is not symmetric
            if (left == null || right == null || left.val != right.val) return false;

            // Enqueue child nodes in mirrored order for further comparison
            queue.add(left.left);   // Left subtree's left child
            queue.add(right.right); // Right subtree's right child
            queue.add(left.right);  // Left subtree's right child
            queue.add(right.left);  // Right subtree's left child
        }

        // If no asymmetry is found, the tree is symmetric
        return true;
    }
}
