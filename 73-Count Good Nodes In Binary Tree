/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */


class Solution {
    private int count = 0; // Counter to keep track of good nodes

    public int goodNodes(TreeNode root) {
        goodNodes(root, Integer.MIN_VALUE);
        return count;
    }

    private void goodNodes(TreeNode node, int maxSoFar) {
        if (node == null) return;

        // If the current node is greater than or equal to the max seen so far, it's a good node
        if (node.val >= maxSoFar) {
            count++;
            maxSoFar = node.val; // Update maxSoFar
        }

        // Recur for left and right subtrees
        goodNodes(node.left, maxSoFar);
        goodNodes(node.right, maxSoFar);
    }
}


//Aliter

class Solution {
    public int goodNodes(TreeNode root) {
        return countGoodNodes(root, Integer.MIN_VALUE);
    }

    private int countGoodNodes(TreeNode node, int maxSoFar) {
        if (node == null) {
            return 0;
        }

        int count = 0;
        if (node.val >= maxSoFar) {
            count = 1;
            maxSoFar = node.val;
        }

        return count + countGoodNodes(node.left, maxSoFar) + countGoodNodes(node.right, maxSoFar);
    }
}
