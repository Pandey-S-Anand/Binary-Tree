/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // Stores the node values level by level (each inner list represents one level of the tree)
        List<List<Integer>> levelOrderTraversal = new ArrayList<>();
    
        // Return an empty list if the tree is empty
        if (root == null) {
            return levelOrderTraversal;
        }

        // Queue to  to track nodes at the current level (BFS)
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root); // Start traversal from the root node

        // Traverse the tree level by level
        while (!queue.isEmpty()) {
             // Number of nodes at the current level
            int currentSize = queue.size();
            // List to store values of the nodes at the current level
            List<Integer> nodesAtCurrentLevel = new ArrayList();

            // Process all nodes at the current level
            while (currentSize-- > 0) {
                TreeNode node = queue.poll(); // Remove and process the front node
                nodesAtCurrentLevel.add(node.val); // Store the node’s value
                
                // Enqueue the left child if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }
                // Enqueue the right child if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            // Add the current level’s values to the result list
            levelOrderTraversal.add(nodesAtCurrentLevel);
        }

        return levelOrderTraversal;
    }
}
