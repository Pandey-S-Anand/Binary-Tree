/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public boolean isSubPath(ListNode head, TreeNode root) {
        // If the tree is empty, there can't be a matching path
        if (root == null) {
            return false;
        }

        // Check if a matching path starts from the current tree node
        if (pathMatches(root, head)) {
            return true;
        }

        // Recursively check in the left and right subtrees
        return isSubPath(head, root.left) || isSubPath(head, root.right);
    }

    private boolean pathMatches(TreeNode root, ListNode head) {
        // If the linked list is fully matched, we found a valid path
        if (head == null) {
            return true;
        }
        
        // If the linked list is not exhausted and the tree node is null or values don't match, stop this path
        if (root == null || root.val != head.val) {
            return false;
        }

        // Continue checking in the left or right child nodes of the tree
        return pathMatches(root.left, head.next) || pathMatches(root.right, head.next);
    }
}
