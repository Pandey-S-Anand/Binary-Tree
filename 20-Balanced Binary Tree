/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    // A binary tree is considered balanced if the left and right subtrees of every node differ in height by no more than 1.
    public boolean isBalanced(TreeNode root) {
        // Base case: An empty tree is balanced
        if (root == null) {
            return true;
        }

        // Calculate heights of left and right subtrees
        int leftSubtreeHeight = getHeight(root.left);
        int rightSubtreeHeight = getHeight(root.right);

        // If the height difference is more than 1, it's not balanced
        if (Math.abs(leftSubtreeHeight - rightSubtreeHeight) > 1) {
            return false;
        }

        // Recursively check if left and right subtrees are also balanced
        return isBalanced(root.left) && isBalanced(root.right);
    }

    /**
     * Computes the height of a binary tree rooted at the given node.
     *
     * Definition:
     *   The height of a binary tree is the number of nodes on the longest path from the current node down to a leaf.
     *
     * Example:
     *     1
     *    / \
     *   2   3
     *  /
     * 4
     * Height of node 1 = 3 (1 → 2 → 4)
     * Height of node 2 = 2 (2 → 4)
     * Height of node 4 = 1
     */
    private int getHeight(TreeNode root) {
        // Base case: The height of an empty tree is 0
        if (root == null) {
            return 0;
        }

        // Recursively get the height of left and right subtrees
        int leftHeight = getHeight(root.left);
        int rightHeight = getHeight(root.right);

        // Height = 1 (current node) + max height of left/right subtree
        return 1 + Math.max(leftHeight, rightHeight);
    }
}


//Optimal approach

class Solution {
    public boolean isBalanced(TreeNode root) {
        // If the root is null, the tree is considered balanced
        if (root == null) {
            return true;
        }

        // The tree is balanced if checkHeight does not return -1
        return checkHeight(root) != -1;
    }

    private int checkHeight(TreeNode node) {
        // If the current node is null, its height is 0 (base case)
        if (node == null) {
            return 0;
        }

        // Recursively find the height of left subtree
        int leftHeight = checkHeight(node.left);
        // If the right subtree is unbalanced , returns -1
        if (leftHeight == -1) {
            return -1;
        }

        // Recursively find the height of right subtree
        int rightHeight = checkHeight(node.right);
        // If the right subtree is unbalanced , returns -1
        if (rightHeight == -1) {
            return -1;
        }

        // If the difference in heights of the left and right subtrees is greater than 1,  the tree is unbalanced at the current node
        if (Math.abs(leftHeight - rightHeight) > 1) {
            return -1;
        }

        // Return the height (or depth) from the current node's (through either left or right subtree)
        return 1 + Math.max(leftHeight, rightHeight);
    }
}
