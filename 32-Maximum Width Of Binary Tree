/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/**
 * Example Binary Tree with Index Assignments:
 *
 *         1 (0)
 *        /     \
 *      2 (1)   3 (2)
 *     /   \      \
 *  4 (3)  5 (4)  6 (6)
 *
 * How the Indices are Assigned (0-based full binary tree indexing):
 * - Root (1) gets index 0.
 * - Left child of 1 (2) → index = 2 × 0 + 1 = 1.
 * - Right child of 1 (3) → index = 2 × 0 + 2 = 2.
 * - Left child of 2 (4) → index = 2 × 1 + 1 = 3.
 * - Right child of 2 (5) → index = 2 × 1 + 2 = 4.
 * - Right child of 3 (6) → index = 2 × 2 + 2 = 6.
 *
 * Width Calculation at Each Level:
 * - Level 0: [1] → Indices [0] → Width = 0 - 0 + 1 = 1
 * - Level 1: [2, 3] → Indices [1, 2] → Width = 2 - 1 + 1 = 2
 * - Level 2: [4, 5, 6] → Indices [3, 4, 6] → Width = 6 - 3 + 1 = 4
 *
 * Maximum Width = 4
 */


class Solution {
    /**
     * Class to store a node along with its corresponding index in the tree.
     * The index is used to calculate the width of each level.
     */
    private class Pair {
        TreeNode node;
        int index; // Represents the index of the node in a 0-based, imaginary full binary tree.

        Pair(TreeNode node, int index) {
            this.node = node;
            this.index = index;
        }
    }

    /*
     * The width of a level is determined by the indices of the leftmost and rightmost nodes in that level.
     * Nodes are indexed as if they were in a full binary tree.
     */
    public int widthOfBinaryTree(TreeNode root) {
        int maxWidth = 0;
        Queue<Pair> queue = new ArrayDeque<>();
        queue.offer(new Pair(root, 0)); // Start with root node at index 0

        while (!queue.isEmpty()) {
            int size = queue.size();
            int firstIndex = queue.peek().index; // First node's index at this level
            int lastIndex = firstIndex; // Will update to the last node's index

            for (int i = 0; i < size; i++) {
                Pair pair = queue.poll();
                TreeNode node = pair.node;
                int index = pair.index;
                lastIndex = index; // Update last index at this level

                // Add left child to queue with index formula: 2 * index + 1
                if (node.left != null) {
                    queue.offer(new Pair(node.left, 2 * index + 1));
                }

                // Add right child to queue with index formula: 2 * index + 2
                if (node.right != null) {
                    queue.offer(new Pair(node.right, 2 * index + 2));
                }
            }

            // Compute width of the current level and update maxWidth
            maxWidth = Math.max(maxWidth, lastIndex - firstIndex + 1);
        }

        return maxWidth;
    }
}
