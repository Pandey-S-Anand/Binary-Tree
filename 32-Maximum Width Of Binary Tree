/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
/*
                             1 (0)
                          /       \
                    3 (1)          2 (2)
                  /     \       /     \
             5 (3)   null(4) null(5)  9 (6)
            /     \                  /
       6 (7)   null(8)              7 (14)

Explanation:
-------------
- We assign indices as if the tree is a complete binary tree.
- Even though some nodes are null (like 3.right or 2.left), we still reserve their positions.
- For example, null at index 4 would have:
    - left child at index 2*4 + 1 = 9
    - right child at index 2*4 + 2 = 10
- We don’t enqueue nulls, but we use these index calculations to:
    - Maintain the correct horizontal structure
    - Correctly compute width using (lastIndex - firstIndex + 1)

This approach ensures we capture the true "width" of the level, including null gaps in between actual nodes.
*/


/* 
                          (0) 
                           1
                         /    \
                       /        \
                  (1) /          \ (2)
                    3              2 
            (3)   /  \            /   \
                 5   null(4)   null(5) 9 (6)
                / \                   /
            (7)6 null(8)         (13)7 

Explanation:
-------------
- We assign indices as if the tree is a complete binary tree.
- Even though some nodes are null (like 3.right or 2.left), we still reserve their positions.
  For example, 3's right child would have index 4 and 2's left child would have index 5.
- For example, the null node at index 4 would have:
    - left child index = 2 * 4 + 1 = 9
    - right child index = 2 * 4 + 2 = 10
- Similarly, the null node at index 5 would have:
    - left child index = 2 * 5 + 1 = 11
    - right child index = 2 * 5 + 2 = 12
- We don’t enqueue null nodes, but we use these index calculations to:
    - Maintain the correct horizontal structure
    - Correctly compute width using (lastIndex - firstIndex + 1)

This approach ensures we capture the true "width" of the level, including null gaps between actual nodes.
*/

class Solution {
    // Helper class to hold a TreeNode along with its "index" as if the tree is complete binary tree
    private static class NodeInfo {
        private TreeNode node; // current node
        private int index;     // index of the node in the conceptual complete binary tree

        NodeInfo(TreeNode node, int index) {
            this.node = node;
            this.index = index;
        }
    }

    public int widthOfBinaryTree(TreeNode root) {
        // Initialize maxWidth with smallest integer to track maximum width found so far
        int maxWidth = Integer.MIN_VALUE;

        // Queue for level order traversal, storing NodeInfo (node + its index)
        Queue<NodeInfo> queue = new ArrayDeque<>();
        queue.offer(new NodeInfo(root, 0)); // Start with root at index 0

        // Process the tree level by level
        while (!queue.isEmpty()) {
            int size = queue.size();

            // The leftmost index in the current level (index of the first node in queue)
            int leftMostIndex = queue.peek().index;
            // Initialize rightMostIndex to leftMostIndex for this level, will be updated while processing nodes
            int rightMostIndex = leftMostIndex;

            // Process all nodes at the current level
            while (size-- > 0) {
                NodeInfo nodeInfo = queue.poll();
                TreeNode node = nodeInfo.node;
                int nodeIndex = nodeInfo.index;

                // Update rightMostIndex to the current node's index
                rightMostIndex = nodeIndex;

                // Enqueue left child with calculated index: 2 * nodeIndex + 1 (complete tree index logic)
                if (node.left != null) {
                    queue.offer(new NodeInfo(node.left, 2 * nodeIndex + 1));
                }

                // Enqueue right child with calculated index: 2 * nodeIndex + 2
                if (node.right != null) {
                    queue.offer(new NodeInfo(node.right, 2 * nodeIndex + 2));
                }
            }

            // Calculate current level width as difference between rightmost and leftmost indices + 1
            int currentLevelWidth = rightMostIndex - leftMostIndex + 1;
            // Update maxWidth if current level width is greater
            maxWidth = Math.max(maxWidth, currentLevelWidth);
        }

        // Return the maximum width found across all levels
        return maxWidth;
    }
}
