/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    private int maxNodesInPath; // max number of nodes in any path between two nodes

    public int diameterOfBinaryTree(TreeNode root) {
        maxNodesInPath = 0; // initialize max path length
        getMaxPathLength(root); // calculate max path length in nodes
        return maxNodesInPath - 1; // diameter = max nodes in path - 1 (edges)
    }

    private int getMaxPathLength(TreeNode node) {
        if (node == null) {
            return 0; // height of empty subtree is 0 nodes
        }

        int left = getMaxPathLength(node.left); // height of left subtree (nodes)
        int right = getMaxPathLength(node.right); // height of right subtree (nodes)

        int nodesInCurrentPath = left + right + 1; // nodes in path through current node
        maxNodesInPath = Math.max(maxNodesInPath, nodesInCurrentPath);

        /*
         * Height of subtree rooted at current node =
         * 1 (current node) + max height of left or right subtree
         *
         * Height defined as the number of nodes on the longest path from that node down to
         * any leaf node (including the starting node and the leaf node)
         */
        return 1 + Math.max(left, right);
    }
}
