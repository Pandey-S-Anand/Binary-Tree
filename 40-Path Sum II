/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    // List to store all valid paths that sum up to the target
    private List<List<Integer>> targetSumPaths;

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        targetSumPaths = new ArrayList<>();
        // Start DFS traversal with an empty path
        getAllTargetSumPaths(root, targetSum, new ArrayList<>());
        return targetSumPaths;
    }

    private void getAllTargetSumPaths(TreeNode root, int targetSum, List<Integer> path) {
        if (root == null) {
            return;
        }

        // Include current node's value in the path
        path.add(root.val);
        // Subtract current node value from targetSum
        targetSum = targetSum - root.val;

        // If current node is a leaf and the remaining targetSum is zero, add this path to result
        if (isLeafNode(root) && targetSum == 0) {
            // Store a copy of the valid path
            targetSumPaths.add(new ArrayList<>(path));
        }

        // Recurse on left and right subtrees
        getAllTargetSumPaths(root.left, targetSum, path);
        getAllTargetSumPaths(root.right, targetSum, path);

        // Backtrack: remove the last node value before returning to the previous level
        path.remove(path.size() - 1);
    }

    private boolean isLeafNode(TreeNode root) {
        return root.left == null && root.right == null;
    }
}
