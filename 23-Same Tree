//Recursive approach

class Solution {
    public boolean isSameTree(TreeNode root1, TreeNode root2) {
        // If both trees are null, they are the same
        if (root1 == null && root2 == null) {
            return true;
        }

        // If one of the trees is null or their values do not match, they are not the same
        if (root1 == null || root2 == null || root1.val != root2.val) {
            return false;
        }

        // Recursively check if the left and right subtrees are the same for both trees
        return isSameTree(root1.left, root2.left) && isSameTree(root1.right, root2.right);
    }
}


//Iterative approach

class Solution {
    // This iterative solution uses a queue to perform level-order traversal on both trees in parallel.
    public boolean isSameTree(TreeNode root1, TreeNode root2) {
        Queue<TreeNode> queue = new LinkedList<>();

        // Enqueue both roots to start parallel comparison
        queue.offer(root1);
        queue.offer(root2);

        // Process nodes in pairs
        while (!queue.isEmpty()) {
            TreeNode node1 = queue.poll();
            TreeNode node2 = queue.poll();

            // If both nodes are null, continue to next pair
            if (node1 == null && node2 == null) {
                continue;
            }

            // If one is null or values don't match, trees are not the same
            if (node1 == null || node2 == null || node1.val != node2.val) {
                return false;
            }

            // Enqueue left children of both nodes for next comparison
            queue.offer(node1.left);
            queue.offer(node2.left);

            // Enqueue right children of both nodes for next comparison
            queue.offer(node1.right);
            queue.offer(node2.right);
        }

        // All nodes matched
        return true;
    }
}
