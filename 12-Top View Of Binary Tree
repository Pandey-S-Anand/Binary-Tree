/*
        1(0)
    /         \
   2(-1)       3(+1)
  /     \     /     \
4(-2)   5(0) 6(0)   7(+2)


Key Observations:
- **Leftmost nodes** will have the **lowest horizontal distance (HD)** because as we traverse left from the root, the horizontal distance decreases by 1 for each level, moving to negative values.
- **Rightmost nodes** will have the **highest horizontal distance (HD)** because as we traverse right from the root, the horizontal distance increases by 1 for each level, moving to positive values.

TreeMap Exploitation:
- **TreeMap** exploits this observation as it sorts the **HD** in **ascending order**.
- Since the HD is the key in the **TreeMap**, it automatically arranges the nodes from the **leftmost** (smallest HD) to the **rightmost** (largest HD).
- This behavior of **TreeMap** ensures that the top view is captured in the correct left-to-right order based on the horizontal distance.

Horizontal Distance Breakdown:

    HD = -2:
        - Node 4 is the only node at this horizontal distance.
        - Topmost node at HD = -2 → Node 4

    HD = -1:
        - Node 2 is the only node at this horizontal distance.
        - Topmost node at HD = -1 → Node 2

    HD = 0:
        - Nodes at this horizontal distance: Node 1, Node 5, Node 6
        - The topmost node at HD = 0 is Node 1 (root node).
        - Topmost node at HD = 0 → Node 1

    HD = +1:
        - Node 3 is the only node at this horizontal distance.
        - Topmost node at HD = +1 → Node 3

    HD = +2:
        - Node 7 is the only node at this horizontal distance.
        - Topmost node at HD = +2 → Node 7

    Final Top View Selection:
    - HD = -2 → Node 4 (leftmost node)
    - HD = -1 → Node 2
    - HD = 0 → Node 1 (root node)
    - HD = +1 → Node 3
    - HD = +2 → Node 7 (rightmost node)

    Final Top View Output: [4, 2, 1, 3, 7]
*/


class Solution {
    // Pair class to store a node and its horizontal distance (hd) from the root
    private static class Pair {
        Node node;
        int hd; // horizontal distance from root
        
        Pair(Node node, int hd) {
            this.node = node;
            this.hd = hd;
        }
    }

    static ArrayList<Integer> topView(Node root) {
        // If the tree is empty, return an empty list
        if (root == null) {
            return new ArrayList<>();
        }

        // Map to store the first / top node at each horizontal distance
        // TreeMap is used to keep keys (horizontal distances) in sorted order
        Map<Integer, Integer> map = new TreeMap<>();

        // Queue for level order traversal, stores pairs of node and its horizontal distance
        Queue<Pair> queue = new ArrayDeque<>();
        
        // Start by adding the root node with horizontal distance 0
        queue.offer(new Pair(root, 0));

        // Perform level order traversal
        while (!queue.isEmpty()) {
            int size = queue.size();

            // Traverse nodes at the current level
            for (int i = 0; i < size; i++) {
                // Extract the front node and its horizontal distance
                Pair pair = queue.poll();
                Node node = pair.node;
                int hd = pair.hd;

                // If this horizontal distance has not been seen before, add the node to the map
                if (!map.containsKey(hd)) {
                    map.put(hd, node.data);
                }

                // Add the left child to the queue with updated horizontal distance (hd - 1)
                if (node.left != null) {
                    queue.offer(new Pair(node.left, hd - 1));
                }

                // Add the right child to the queue with updated horizontal distance (hd + 1)
                if (node.right != null) {
                    queue.offer(new Pair(node.right, hd + 1));
                }
            }
        }

        // Prepare the top view from the map by retrieving all values
        ArrayList<Integer> topView = new ArrayList<>();
        for (int value : map.values()) {
            topView.add(value);
        }

        return topView;
    }
}
