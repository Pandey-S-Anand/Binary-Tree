/*
        1(0)
    /         \
   2(-1)       3(+1)
  /     \     /     \
4(-2)   5(0) 6(0)   7(+2)


Key Observations:
- **Leftmost nodes** will have the **lowest horizontal distance (HD)** because as we traverse left from the root, the horizontal distance decreases by 1 for each level, moving to negative values.
- **Rightmost nodes** will have the **highest horizontal distance (HD)** because as we traverse right from the root, the horizontal distance increases by 1 for each level, moving to positive values.

TreeMap Exploitation:
- **TreeMap** exploits this observation as it sorts the **HD** in **ascending order**.
- Since the HD is the key in the **TreeMap**, it automatically arranges the nodes from the **leftmost** (smallest HD) to the **rightmost** (largest HD).
- This behavior of **TreeMap** ensures that the top view is captured in the correct left-to-right order based on the horizontal distance.

Horizontal Distance Breakdown:

    HD = -2:
        - Node 4 is the only node at this horizontal distance.
        - Topmost node at HD = -2 → Node 4

    HD = -1:
        - Node 2 is the only node at this horizontal distance.
        - Topmost node at HD = -1 → Node 2

    HD = 0:
        - Nodes at this horizontal distance: Node 1, Node 5, Node 6
        - The topmost node at HD = 0 is Node 1 (root node).
        - Topmost node at HD = 0 → Node 1

    HD = +1:
        - Node 3 is the only node at this horizontal distance.
        - Topmost node at HD = +1 → Node 3

    HD = +2:
        - Node 7 is the only node at this horizontal distance.
        - Topmost node at HD = +2 → Node 7

    Final Top View Selection:
    - HD = -2 → Node 4 (leftmost node)
    - HD = -1 → Node 2
    - HD = 0 → Node 1 (root node)
    - HD = +1 → Node 3
    - HD = +2 → Node 7 (rightmost node)

    Final Top View Output: [4, 2, 1, 3, 7]
*/


class Solution {
    // Helper class to store a node along with its horizontal distance (HD) from the root
    private static class Pair {
        private Node node;
        private int hd;

        Pair(Node node, int hd) {
            this.node = node;
            this.hd = hd;
        }
    }

    static ArrayList<Integer> topView(Node root) {
        /*
         Map to store the first / top node at each horizontal distance
         TreeMap is used to keep keys (horizontal distances) in sorted order
         */
        Map<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> queue = new ArrayDeque<>();// Queue for level-order traversal (BFS)
        queue.offer(new Pair(root, 0)); // Root is at horizontal distance 0

        while (!queue.isEmpty()) {
            int size = queue.size();

            while (size-- > 0) {
                Pair pair = queue.poll();
                Node node = pair.node;
                int hd = pair.hd;

                // If this HD is being encountered the first time, add to result Because we want the topmost/first node at each HD
                if (!map.containsKey(hd)) {
                    map.put(hd, node.data);
                }

                // Add the left child to the queue with updated horizontal distance (hd - 1)
                if (node.left != null) {
                    queue.offer(new Pair(node.left, hd - 1));
                }

                // Add the right child to the queue with updated horizontal distance (hd + 1)
                if (node.right != null) {
                    queue.offer(new Pair(node.right, hd + 1));
                }
            }
        }
        // Extract the values from leftmost HD to rightmost HD
        return new ArrayList<>(map.values());
    }
}
