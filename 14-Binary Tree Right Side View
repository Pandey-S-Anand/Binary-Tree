
//Naive approach

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        // Return an empty list if the tree is empty
        if (root == null) {
            return Collections.emptyList();
        }

        List<Integer> rightView = new ArrayList<>();

        // Queue to to track nodes at the current level (BFS)
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root); // Start traversal from the root node

        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int size = queue.size();

            // Process all nodes at the current level
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();

                // If it's the last node in the current level, add it to the result
                if (i == size - 1) {
                    rightView.add(node.val);
                }

                // Enqueue the left child if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }

                // Enqueue the right child if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
        }

        return rightView;
    }
}


//Optimal approach

class Solution {
    private List<Integer> rightView;

    public List<Integer> rightSideView(TreeNode root) {
        rightView = new ArrayList<>();
        dfs(root, 0);
        return rightView;
    }

    private void dfs(TreeNode node, int depth) {
        if (node == null) {
            return;
        }

        // If this is the first node at the current depth, add it to the right view
        if (depth == rightView.size()) {
            rightView.add(node.val);
        }

        // Prioritize the right subtree to ensure rightmost nodes are processed first
        dfs(node.right, depth + 1);
        
        // Process the left subtree after the right subtree
        dfs(node.left, depth + 1);
    }
}
