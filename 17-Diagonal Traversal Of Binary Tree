/* Node is defined as
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}*/

/**
 * Diagonal Traversal - Assigning Identity (Diagonal Number) to Each Node
 *
 * Rule for assigning diagonal ID:
 * - Start with the root node: diagonal = 0
 * - Move to the RIGHT child: diagonal remains the SAME
 * - Move to the LEFT child: diagonal INCREASES by 1
 *
 * This diagonal ID acts as a group identity to collect nodes that lie along the same diagonal line
 * (slope = -1).
 *
 * Example Tree:
 *
 *              8
 *            /   \
 *           3     10
 *          / \      \
 *         1   6      14
 *            / \     /
 *           4   7   13
 *
 * Diagonal ID assignment:
 * 
 * - Node 8   → diagonal 0
 * - Node 10  → diagonal 0
 * - Node 14  → diagonal 0
 * - Node 13  → diagonal 1 (left of 14)
 * - Node 3   → diagonal 1 (left of 8)
 * - Node 6   → diagonal 1 (right of 3)
 * - Node 7   → diagonal 1 (right of 6)
 * - Node 1   → diagonal 2 (left of 3)
 * - Node 4   → diagonal 2 (left of 6)
 *
 * Final Diagonals Grouped:
 * - Diagonal 0 → 8, 10, 14
 * - Diagonal 1 → 3, 6, 7, 13
 * - Diagonal 2 → 1, 4
 *
 * This identity helps collect and traverse nodes diagonal-wise.
 */


//Using DFS

class Tree {
    // A map to store nodes in diagonal groups, where the key is the diagonal index.
    private Map<Integer, List<Integer>> diagonalGroupsMap;
    
    public ArrayList<Integer> diagonal(Node root) {
        // TreeMap to sort the diagonal index in ascending order
        diagonalGroupsMap = new TreeMap<>();
        
        // Perform diagonal traversal starting from root, with diagonal index 0
        diagonalTraversalHelper(root, 0);

        // Create result list to store the diagonal traversal
        ArrayList<Integer> diagonalTraversal = new ArrayList<>();
        
        // Collect all diagonal elements by iterating through diagonalGroupsMap
        for (List<Integer> diagonal : diagonalGroupsMap.values()) {
            diagonalTraversal.addAll(diagonal);
        }

        return diagonalTraversal;
    }
    
    // The diagonal index increases as we move to the left subtree
    private void diagonalTraversalHelper(Node node, int diagonal) {
        if (node == null) {
            return;
        }
        
        // Add the current node's value to the corresponding diagonal list
        diagonalGroupsMap.computeIfAbsent(diagonal,k -> new ArrayList<>()).add(node.data);
        
        // Traverse the left subtree, moving to the next diagonal (diagonal + 1)
        // This is a key point: by incrementing the diagonal index here, we start a new diagonal starting from the left child.
        diagonalTraversalHelper(node.left, diagonal + 1);

        // Traverse the right subtree, staying on the same diagonal (diagonal)
        diagonalTraversalHelper(node.right, diagonal);
    }
}


//Using BFS

class Tree {
    public ArrayList<Integer> diagonal(Node root) {
        ArrayList<Integer> diagonalTraversal = new ArrayList<>();

        // Queue to store nodes for the next diagonal levels
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            // Remove the front node from the queue
            Node current = queue.poll();

            // Process all nodes in the current diagonal by moving right until there are no more right nodes.
            while (current != null) {
                diagonalTraversal.add(current.data);

                // If there is a left child, it belongs to the next diagonal.
                if (current.left != null) {
                    queue.offer(current.left);
                }
                
                // Move to the right child (staying in the same diagonal)
                current = current.right;
            }
        }
        
        return diagonalTraversal;
    }
}
