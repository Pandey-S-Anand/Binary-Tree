/* Node is defined as
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}*/

/*
    Example Tree:
    
               1
             /   \
            2     3
           / \   /  \
          4   5 6    7
         / \       /  \
        8   9    10    11
    
    The tree has four levels:
    
    Level 0: Node 1
    Level 1: Nodes 2 and 3
    Level 2: Nodes 4, 5, 6, and 7
    Level 3: Nodes 8, 9, 10, and 11
    
    Final Diagonal Groupings:
        
    Diagonal 0:
    Nodes encountered: 1 (root), 3 (right child of 1), 7 (right child of 3), 11 (right child of 7)
    Group: [1, 3, 7, 11]
    
    Diagonal 1:
    Nodes encountered: 2 (left child of 1), 5 (right child of 2), 6 (left child of 3), 10 (left child of 7)
    Group: [2, 5, 6, 10]
    
    Diagonal 2:
    Nodes encountered: 4 (left child of 2), 9 (right child of 4)
    Group: [4, 9]
    
    Diagonal 3:
    Nodes encountered: 8 (left child of 4)
    Group: [8]
    
    When you combine all the diagonals, the diagonal traversal of the tree produces the following list (ordered by increasing diagonal index):
    
    Final Diagonal Traversal: [1, 3, 7, 11, 2, 5, 6, 10, 4, 9, 8]
*/

//Using DFS

class Tree {
    // A map to store nodes in diagonal groups, where the key is the diagonal index.
    private Map<Integer, List<Integer>> diagonalGroupsMap;
    
    public ArrayList<Integer> diagonal(Node root) {
        // TreeMap to sort the diagonal index in ascending order
        diagonalGroupsMap = new TreeMap<>();
        
        // Perform diagonal traversal starting from root, with diagonal index 0
        diagonalTraversalHelper(root, 0);

        // Create result list to store the diagonal traversal
        ArrayList<Integer> diagonalTraversal = new ArrayList<>();
        
        // Collect all diagonal elements by iterating through diagonalGroupsMap
        for (List<Integer> diagonal : diagonalGroupsMap.values()) {
            diagonalTraversal.addAll(diagonal);
        }

        return diagonalTraversal;
    }
    
    // The diagonal index increases as we move to the left subtree
    private void diagonalTraversalHelper(Node node, int diagonal) {
        if (node == null) {
            return;
        }
        
        diagonalGroupsMap.putIfAbsent(diagonal, new ArrayList<>());
        // Add the current node's value to the corresponding diagonal list
        diagonalGroupsMap.get(diagonal).add(node.data);

        // Traverse the left subtree, moving to the next diagonal (diagonal + 1)
        // This is a key point: by incrementing the diagonal index here, we start a new diagonal starting from the left child.
        diagonalTraversalHelper(node.left, diagonal + 1);

        // Traverse the right subtree, staying on the same diagonal (diagonal)
        diagonalTraversalHelper(node.right, diagonal);
    }
}


//Using BFS

class Tree {
    public ArrayList<Integer> diagonal(Node root) {
        ArrayList<Integer> diagonalTraversal = new ArrayList<>();
        if (root == null) {
            return diagonalTraversal;
        }

        // Queue to store nodes for the next diagonal levels
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            // Remove the front node from the queue
            Node current = queue.poll();

            // Process all nodes in the current diagonal by moving right until there are no more right nodes.
            while (current != null) {
                diagonalTraversal.add(current.data);

                // If there is a left child, it belongs to the next diagonal.
                if (current.left != null) {
                    queue.offer(current.left);
                }
                
                // Move to the right child (staying in the same diagonal)
                current = current.right;
            }
        }
        
        return diagonalTraversal;
    }
}
