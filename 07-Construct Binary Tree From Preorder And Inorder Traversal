/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/**
 * 
 * The approach is based on the following principles:
 * 
 * 1. **Preorder** traversal always starts with the root of the tree/subtree.
 * 2. **Inorder** traversal places the root between the left and right subtrees.
 * 3. For every subtree:
 * - The root is the first element from the **preorder** traversal.
 * - The root divides the **inorder** traversal into two parts:
 * - Left subtree (elements before the root).
 * - Right subtree (elements after the root).
 *
 * The steps to build the tree are:
 * - Pick the next element from **preorder** as the root for the current subtree.
 * - Find this root in the **inorder** array to identify the left and right subtrees.
 * - Recursively build the left and right subtrees using the divided **inorder** subarrays.
 */
class Solution {
    private int preorderIndex; // Tracks the current root in the preorder traversal.
    private Map<Integer, Integer> inorderIndexMap; // Maps each value in inorder to its index for quick lookup.

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        preorderIndex = 0; // Start from the first element in the preorder array.
        inorderIndexMap = new HashMap<>();

        for (int i = 0; i < inorder.length; i++) {
            inorderIndexMap.put(inorder[i], i);
        }

        // Recursively construct the binary tree and return the root.
        return constructTree(preorder, 0, inorder.length - 1);
    }

    private TreeNode constructTree(int[] preorder, int inorderStart, int inorderEnd) {
        // Base case: If the start index exceeds the end index, the subtree is empty.
        if (inorderStart > inorderEnd) {
            return null;
        }

        // The current root is the next element in preorder traversal.
        int rootValue = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootValue);

        // Find the index of the root in the inorder array using the map.
        int inorderIndex = inorderIndexMap.get(rootValue);

        // Recursively construct the left subtree using elements to the left of the root in inorder.
        root.left = constructTree(preorder, inorderStart, inorderIndex - 1);

        // Recursively construct the right subtree using elements to the right of the root in inorder.
        root.right = constructTree(preorder, inorderIndex + 1, inorderEnd);

        return root;
    }
}
