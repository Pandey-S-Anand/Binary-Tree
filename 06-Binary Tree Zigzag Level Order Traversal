//Naive implementation

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // Stores the node values level by level (each inner list represents one level of the tree)
        List<List<Integer>> levelOrderTraversal = new ArrayList<>();

        // Return an empty list if the tree is empty
        if (root == null) {
            return levelOrderTraversal;
        }

        // Queue to  to track nodes at the current level (BFS)
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root); // Start traversal from the root node
        // This flag determines the order of node values in each level : false → left to right, true → right to left
        boolean rightToLeft = false;

        // Traverse the tree level by level
        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int currentSize = queue.size();
            // List to store values of the nodes at the current level
            List<Integer> nodesAtCurrentLevel = new ArrayList();

            // Process all nodes at the current level
            while (currentSize-- > 0) {
                TreeNode node = queue.poll(); // Remove and process the front node
                // Insert node value
                nodesAtCurrentLevel.add(node.val);

                // Enqueue the left child if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }
                // Enqueue the right child if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }

            // If direction is right-to-left, reverse the list
            if (rightToLeft) {
                Collections.reverse(nodesAtCurrentLevel);
            }

            // Add the current level’s values to the result list
            levelOrderTraversal.add(nodesAtCurrentLevel);
            // Flip the traversal direction for the next level
            rightToLeft = !rightToLeft;
        }

        return levelOrderTraversal;
    }
}

//Optimal implementation

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // Stores the node values level by level (each inner list represents one level of the tree)
        List<List<Integer>> levelOrderTraversal = new ArrayList<>();

        // Return an empty list if the tree is empty
        if (root == null) {
            return levelOrderTraversal;
        }

        // Queue to  to track nodes at the current level (BFS)
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root); // Start traversal from the root node
        // This flag determines the order of node values in each level : false → left to right, true → right to left
        boolean rightToLeft = false;

        // Traverse the tree level by level
        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int currentSize = queue.size();
            // List to store values of the nodes at the current level
            LinkedList<Integer> nodesAtCurrentLevel = new LinkedList();

            // Process all nodes at the current level
            while (currentSize-- > 0) {
                TreeNode node = queue.poll(); // Remove and process the front node
                // Insert node value based on current traversal direction
                if (rightToLeft) {
                    nodesAtCurrentLevel.offerFirst(node.val); // Add to front for right-to-left order
                } else {
                    nodesAtCurrentLevel.offerLast(node.val);  // Add to end for left-to-right order
                }

                // Enqueue the left child if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }
                // Enqueue the right child if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }

            // Add the current level’s values to the result list
            levelOrderTraversal.add(nodesAtCurrentLevel);
            // Flip the traversal direction for the next level
            rightToLeft = !rightToLeft;
        }

        return levelOrderTraversal;
    }
}
