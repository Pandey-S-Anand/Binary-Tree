/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private List<List<Integer>> paths; // Stores all root-to-leaf paths

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        paths = new ArrayList<>();
        List<List<Integer>> targetSumPaths = new ArrayList<>();

        // Generate all root-to-leaf paths
        getAllPaths(root, new ArrayList<>());

        // Iterate through all collected paths and check if their sum matches targetSum
        for (List<Integer> path : paths) {
            if (getPathSum(path) == targetSum) {
                targetSumPaths.add(path); // Add the valid path to the result list
            }
        }

        return targetSumPaths; // Return all paths that match the target sum
    }

    private void getAllPaths(TreeNode currentNode, List<Integer> currentPath) {
        // Base case: If the node is null, return immediately
        if (currentNode == null) {
            return;
        }

        // Add the current node's value to the path
        currentPath.add(currentNode.val);

        // If this is a leaf node, add the current path to the paths list
        if (currentNode.left == null && currentNode.right == null) {
            paths.add(new ArrayList<>(currentPath)); // Store a copy of the path
            currentPath.remove(currentPath.size() - 1); // Backtrack to explore other paths
            return;
        }

        // Recursively explore the left and right subtrees
        getAllPaths(currentNode.left, currentPath);
        getAllPaths(currentNode.right, currentPath);

        // Backtrack: Remove the current node from the path before returning to the previous level
        currentPath.remove(currentPath.size() - 1);
    }

    private int getPathSum(List<Integer> path) {
        int sum = 0;

        // Calculate the sum of all elements in the given path
        for (int num : path) {
            sum += num;
        }

        return sum; // Return the computed sum
    }
}


//Optimal approach

