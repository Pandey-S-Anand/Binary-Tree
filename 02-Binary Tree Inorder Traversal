/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/* 
    Example of Inorder Traversal:

    Consider the following binary tree:

              1
            /   \
           2     3
         /  \     \
        4    5     6

    Inorder Traversal: Left → Root → Right

    1. Start at the root node (1).
        - Move to the left child node 2.

    2. Move to the left child of node 2 (node 4).
        - Visit node 4 → Add 4 to the list.
        - Node 4 has no children, so return to node 2.

    3. Visit node 2.
        - Visit node 2 → Add 2 to the list.
        - Move to the right child of node 2 (node 5).

    4. Visit node 5.
        - Visit node 5 → Add 5 to the list.
        - Node 5 has no children, so return to node 1.

    5. Visit node 1.
        - Visit node 1 → Add 1 to the list.
        - Move to the right child of node 1 (node 3).

    6. Move to the right child of node 3 (node 6).
        - Visit node 6 → Add 6 to the list.
        - Node 6 has no children, end traversal.

    Inorder Traversal Result: [4, 2, 5, 1, 3, 6]

    In Inorder Traversal, the nodes are visited in the following order:
    Left Subtree → Root → Right Subtree.
*/

//Naive approacch

//Recursive approach

class Solution {
    private List<Integer> inorder;

    public List<Integer> inorderTraversal(TreeNode root) {
        inorder = new ArrayList<>();
        // Perform the recursive inorder traversal
        performInorderTraversal(root);
        return inorder;
    }

    private void performInorderTraversal(TreeNode root) {
        // Base case: if the node is null, return immediately
        if (root == null) {
            return;
        }

        // Recur on the left subtree
        performInorderTraversal(root.left);

        // Add the value of the current node to the traversal list
        inorder.add(root.val);

        // Recur on the right subtree
        performInorderTraversal(root.right);
    }
}


//Iterative approach

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList<>();

        Deque<TreeNode> stack = new ArrayDeque<>();

        // Start with the root of the tree
        TreeNode currentNode = root;

        while (currentNode != null || !stack.isEmpty()) {
            // Reach the leftmost node (push all left nodes onto the stack)
            while (currentNode != null) {
                stack.push(currentNode);
                currentNode = currentNode.left;
            }

            // Pop the top node from the stack, this is the node that should be visited
            currentNode = stack.pop();

            // Add the value of the current node to the inorder traversal list
            inorder.add(currentNode.val);

            // Move to the right child of the current node
            currentNode = currentNode.right;
        }

        return inorder;
    }
}


//Optimal approach (Morris inorder traversal)

/*
Dry Run for the tree:

Input Tree:
        1
       / \
      2   5
     / \   \
    3   4   6

Step-by-Step:

1. Start at node 1:
   - 1 has left child 2, so find the rightmost node in the left subtree (4).
   - 4.right = 1 (create temporary thread).
   - Move to the left child of 1 (i.e., 2)

   Tree becomes:
         1
       / | \
      2  |  5
     / \ |   \
    3   4     6


2. Start at node 2:
   - 2 has left child 3, so find the rightmost node in the left subtree (3).
   - 3.right = 2 (create temporary thread).
   - Move to the left child of 2 (i.e., 3)

   Tree becomes:
         1
       / | \
      2  |  5
     /|\ |   \
    3→| 4     6


3. Start at node 3:
   - 3 has no left child.
   - Inorder value collected: 3
   - Move to right (i.e., 2 via temporary thread)

4. Start at node 2 again:
   - Temporary link detected (3.right == 2). (rightmost node  in left subtree of 2 (i.e 3) has right pointer pointing to current node i.e 2)
   - Inorder value collected: 2
   - Remove temporary link.
   - Move to right (i.e., 4)

   Tree becomes:
         1
       / | \
      2  |  5
     / \ |   \
    3   4     6


5. Start at node 4:
   - 4 has no left child.
   - Inorder value collected: 4
   - Move to right (i.e., 1 via temporary thread)

6. Start at node 1 again:
   - Temporary link detected (rightmost node  in left subtree of 1 (i.e 3) has right pointer pointing to current node i.e 1)
   - Inorder value collected: 4
   - Remove temporary link.
   - Move to right (i.e., 5)

7. Start at node 5:
   - 5 has no left child.
   - Inorder value collected: 5
   - Move to right (i.e., 6)

8. Start at node 6:
   - 6 has no left child.
   - Inorder value collected: 6
   - Move to right (i.e., null)

Preorder Traversal Collected:
[3, 2, 4, 1, 5, 6]
*/

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList<>();
        TreeNode currentNode = root;

        while (currentNode != null) {
            // Case 1: If there is no left subtree, process the node and move right
            if (currentNode.left == null) {
                inorder.add(currentNode.val); // Add current node value to the list
                currentNode = currentNode.right; // Move to the right subtree
            } else {
                TreeNode rightMostNode = currentNode.left;
                // Move to the rightmost node in the left subtree
                /*
                 * rightmost.right != current condition is detecting the temporary link
                 * If rightmost.right is already pointing to current, we need to revert the changes we made.
                 */
                while (rightMostNode.right != null && rightMostNode.right != currentNode) {
                    rightMostNode = rightMostNode.right;
                }

                if (rightMostNode.right == currentNode) {
                    /*
                     * This condition indicates that we have finished processing the left subtree.
                     * We add the current node value to the result, remove the temporary link, and move to the right subtree.
                     */
                    inorder.add(currentNode.val); // Add current node value to the list
                    rightMostNode.right = null; // Revert the temporary link (remove the thread)
                    currentNode = currentNode.right; // Move to the right subtree
                } else {
                    // Create a temporary thread from the rightmost node to the current node
                    rightMostNode.right = currentNode;
                    currentNode = currentNode.left; // Move to the left subtree
                }
            }
        }

        return inorder;
    }
}
