/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/* 
    Example of Inorder Traversal:

    Consider the following binary tree:

              1
            /   \
           2     3
         /  \     \
        4    5     6

    Inorder Traversal: Left → Root → Right

    1. Start at the root node (1).
        - Move to the left child node 2.

    2. Move to the left child of node 2 (node 4).
        - Visit node 4 → Add 4 to the list.
        - Node 4 has no children, so return to node 2.

    3. Visit node 2.
        - Visit node 2 → Add 2 to the list.
        - Move to the right child of node 2 (node 5).

    4. Visit node 5.
        - Visit node 5 → Add 5 to the list.
        - Node 5 has no children, so return to node 1.

    5. Visit node 1.
        - Visit node 1 → Add 1 to the list.
        - Move to the right child of node 1 (node 3).

    6. Move to the right child of node 3 (node 6).
        - Visit node 6 → Add 6 to the list.
        - Node 6 has no children, end traversal.

    Inorder Traversal Result: [4, 2, 5, 1, 3, 6]

    In Inorder Traversal, the nodes are visited in the following order:
    Left Subtree → Root → Right Subtree.
*/


//Naive approacch

//Recursive approach

class Solution {
    private List<Integer> inorderTraversal;

    public List<Integer> inorderTraversal(TreeNode root) {
        inorderTraversal = new ArrayList<>();
        // Perform the recursive inorder traversal
        performInorderTraversal(root);
        return inorderTraversal;
    }

    private void performInorderTraversal(TreeNode root) {
        // Base case: if the node is null, return immediately
        if (root == null) {
            return;
        }

        // Recur on the left subtree
        performInorderTraversal(root.left);

        // Add the value of the current node to the traversal list
        inorderTraversal.add(root.val);

        // Recur on the right subtree
        performInorderTraversal(root.right);
    }
}


//Iterative approach

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorderTraversal = new ArrayList<>();

        Deque<TreeNode> stack = new ArrayDeque<>();

        // Start with the root of the tree
        TreeNode current = root;

        while (current != null || !stack.isEmpty()) {
            // Reach the leftmost node (push all left nodes onto the stack)
            while (current != null) {
                stack.push(current);
                current = current.left;
            }

            // Pop the top node from the stack, this is the node that should be visited
            current = stack.pop();

            // Add the value of the current node to the inorder traversal list
            inorderTraversal.add(current.val);

            // Move to the right child of the current node
            current = current.right;
        }

        return inorderTraversal;
    }
}


//Optimal approach (Morris inorder traversal)

//With modification of the original tree structure

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root == null) {
            return Collections.emptyList();
        }

        List<Integer> inorderList = new ArrayList<>();
        TreeNode current = root;

        while (current != null) {
            // Case 1: If there is no left subtree, process the node and move right
            if (current.left == null) {
                inorderList.add(current.val);  // Add current node value to the list
                current = current.right;       // Move to the right subtree
            } else {
                // Case 2: If left subtree exists, find the rightmost node in the left subtree
                TreeNode rightmost = current.left;

                // Move to the rightmost node in the left subtree
                while (rightmost.right != null) {
                    rightmost = rightmost.right;
                }

                // Create a temporary thread from the rightmost node to the current node
                rightmost.right = current;
                TreeNode temp = current;  // Store current node reference
                current = current.left;   // Move current to its left subtree

                // Remove the left link to avoid infinite loops
                temp.left = null;
            }
        }

        return inorderList;
    }
}

//Without modification of the original tree structure

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root == null) {
            return Collections.emptyList();
        }

        List<Integer> inorderList = new ArrayList<>();
        TreeNode current = root;

        while (current != null) {
            // Case 1: If there is no left subtree, process the node and move right
            if (current.left == null) {
                inorderList.add(current.val); // Add current node value to the list
                current = current.right; // Move to the right subtree
            } else {
                // Case 2: If left subtree exists, find the rightmost node in the left subtree
                TreeNode rightmost = current.left;

                // Move to the rightmost node in the left subtree
                /*
                 * rightmost.right != current condition is detecting the temporary link
                 * If rightmost.right is already pointing to current, we need to revert the changes we made.
                 */
                while (rightmost.right != null && rightmost.right != current) {
                    rightmost = rightmost.right;
                }

                if (rightmost.right == current) {
                    /*
                     * This condition indicates that we have finished processing the left subtree.
                     * We add the current node value to the result, remove the temporary link,
                     * and move to the right subtree.
                     */
                    inorderList.add(current.val); // Add current node value to the list
                    rightmost.right = null; // Revert the temporary link (remove the thread)
                    current = current.right; // Move to the right subtree
                } else {
                    // Create a temporary thread from the rightmost node to the current node
                    rightmost.right = current;
                    current = current.left; // Move to the left subtree
                }
            }
        }

        return inorderList;
    }
}
