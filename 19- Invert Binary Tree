/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public TreeNode invertTree(TreeNode root) {
        // Call the helper function to perform the inversion
        invertTreeHelper(root);
        return root;
    }

    private void invertTreeHelper(TreeNode root) {
        // Base case: If the current node is null, return (no further inversion needed)
        if (root == null) {
            return;
        }

        // Swap the left and right subtrees
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;

        // Recursively invert the left and right subtrees
        invertTreeHelper(root.left);
        invertTreeHelper(root.right);
    }
}
