/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */


//Recursive approach

class Solution {
    public boolean isSymmetric(TreeNode root) {
        // A tree is symmetric if its left and right subtrees are mirror images of each other
        return isSymmetric(root.left, root.right);
    }

    private boolean isSymmetric(TreeNode root1, TreeNode root2) {
        // Both nodes are null: symmetric
        if (root1 == null && root2 == null) {
            return true;
        }

        // One node is null or values don't match: not symmetric
        if (root1 == null || root2 == null || root1.val != root2.val) {
            return false;
        }

        // Recursively compare left with right and right with left
        return isSymmetric(root1.left, root2.right) && isSymmetric(root1.right, root2.left);
    }
}


//Iterative approach

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }

        // Use a queue to compare nodes in pairs, utilizing LinkedList to allow null values
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root.left);
        queue.add(root.right);

        while (!queue.isEmpty()) {
            // Retrieve two nodes for comparison 
            TreeNode leftNode = queue.poll();
            TreeNode rightNode = queue.poll();

            // If both nodes are null, continue to the next pair
            if (leftNode == null && rightNode == null) {
                continue;
            }

            // If one node is null or their values differ, the tree is not symmetric
            if (leftNode == null || rightNode == null || leftNode.val != rightNode.val) {
                return false;
            }

            // Enqueue child nodes in mirrored order for further comparison
            queue.add(leftNode.left); // Left subtree's left child
            queue.add(rightNode.right); // Right subtree's right child
            queue.add(leftNode.right); // Left subtree's right child
            queue.add(rightNode.left); // Right subtree's left child
        }

        // If no asymmetry is found, the tree is symmetric
        return true;
    }
}
