class Solution {
    private static Map<Node, Node> parentMap; // Stores parent references for each node
    private static Node targetNode; // Stores reference to the target node

    static int sum_at_distK(Node root, int target, int k) {
        parentMap = new HashMap<>();
        buildParentMap(root, null, target); // Step 1: Build parent references & find the target node
        return sumAtDistanceK(targetNode, k); // Step 2: Perform BFS to calculate sum
    }

    private static void buildParentMap(Node currentNode, Node parent, int target) {
        if (currentNode == null) {
            return;
        }

        // If current node is the target, store its reference
        if (currentNode.data == target) {
            targetNode = currentNode;
        }

        // Store parent reference for the current node
        parentMap.put(currentNode, parent);

        // Recur for left and right subtrees
        buildParentMap(currentNode.left, currentNode, target);
        buildParentMap(currentNode.right, currentNode, target);
    }

    private static int sumAtDistanceK(Node targetNode, int k) {
        int sum = 0, distance = 0;
        Set<Node> visited = new HashSet<>(); // Keeps track of visited nodes
        Queue<Node> queue = new ArrayDeque<>(); // BFS queue

        // Initialize BFS with the target node
        queue.offer(targetNode);
        visited.add(targetNode);

        // BFS traversal up to k levels
        while (!queue.isEmpty() && distance <= k) {
            int size = queue.size(); // Number of nodes at current level

            for (int i = 0; i < size; i++) {
                Node node = queue.poll(); // Process the current node
                sum += node.data; // Add its value to the sum

                // Explore the left child
                if (node.left != null && !visited.contains(node.left)) {
                    queue.offer(node.left);
                    visited.add(node.left);
                }

                // Explore the right child
                if (node.right != null && !visited.contains(node.right)) {
                    queue.offer(node.right);
                    visited.add(node.right);
                }

                // Explore the parent node (using parentMap)
                Node parent = parentMap.get(node);
                if (parent != null && !visited.contains(parent)) {
                    queue.offer(parent);
                    visited.add(parent);
                }
            }

            distance++; // Move to the next level
        }

        return sum; // Return the total sum of nodes within distance k
    }
}
