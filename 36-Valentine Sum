class Solution {
    // Map to store parent references for each node in the tree
    private Map<Integer, Node> nodeParentMap;

    // Pointer to keep track of the actual node object that matches the target value
    private Node targetNode;
    
    int sum_at_distK(Node root, int target, int k) {
        targetNode = null;
        nodeParentMap = new HashMap<>();

        /**
         * Why do we need parent references?
         * -----------------------------------
         * - In a binary tree, we can move to child nodes directly from a parent,
         *   but there's no direct way to move back to the parent.
         * - To support upward traversal (towards ancestors) during BFS from the target node,
         *   we record parent references for each node beforehand.
         *
         * Additionally:
         * - While building parent mapping, we also locate and store the node object
         *   that has the same value as the given target.
         */
        /**
         * Traverse the tree to:
         * 1. Build a mapping from each node to its parent
         * 2. Locate and store the reference to the target node
         */
        mapParentsAndLocateTarget(root, null, target);

        // Set to track visited nodes to avoid revisiting them during BFS
        Set<Integer> visited = new HashSet<>();
        int sum = 0;  // Will hold the sum of all nodes at distance 'k' from target

        // Queue to perform level-order traversal (BFS)
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(targetNode);            // Start from the target node
        visited.add(targetNode.data);       // Mark target as visited

        /**
         * Perform BFS from the target node up to k levels.
         * - After 1 level, queue contains nodes at distance 1 from the target
         * - After 2 levels, queue contains nodes at distance 2
         * - Continue this until k becomes 0
         */
        while (!queue.isEmpty() && k != 0) {
            int size = queue.size();  // Number of nodes at the current level

            while (size-- > 0) {
                Node currentNode = queue.poll();

                // Add current node's value to sum (part of level < k)
                sum += currentNode.data;

                // Traverse left child if exists and unvisited
                if (currentNode.left != null && !visited.contains(currentNode.left.data)) {
                    queue.offer(currentNode.left);
                    visited.add(currentNode.left.data);
                }

                // Traverse right child if exists and unvisited
                if (currentNode.right != null && !visited.contains(currentNode.right.data)) {
                    queue.offer(currentNode.right);
                    visited.add(currentNode.right.data);
                }

                // Traverse parent if exists and unvisited
                Node parentNode = nodeParentMap.get(currentNode.data);
                if (parentNode != null && !visited.contains(parentNode.data)) {
                    queue.offer(parentNode);
                    visited.add(parentNode.data);
                }
            }

            // Move to next level in BFS
            k--;
        }

        /**
         * After exactly k BFS levels, the queue now contains all nodes at distance k
         * from the original target node. Sum their values as final part of the result.
         */
        while (!queue.isEmpty()) {
            sum += queue.poll().data;
        }

        return sum; // Return the total sum of nodes within distance k
    }

    private void mapParentsAndLocateTarget(Node currentNode, Node parentNode, int targetValue) {
        if (currentNode == null) {
            return;
        }

        // If this is the target node, store its reference
        if (currentNode.data == targetValue) {
            targetNode = currentNode;
        }

        // Store the parent for current node
        nodeParentMap.put(currentNode.data, parentNode);

        // Recursively do the same for left and right children
        mapParentsAndLocateTarget(currentNode.left, currentNode, targetValue);
        mapParentsAndLocateTarget(currentNode.right, currentNode, targetValue);
    }
}
