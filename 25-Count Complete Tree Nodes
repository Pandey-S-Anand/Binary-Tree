//Naive approach

class Solution {
    public int countNodes(TreeNode root) {
        // Base case: if the current node is null, return 0 (no node to count)
        if (root == null) {
            return 0;
        }

        /*
         * Recursively count:
         * - The current node (1)
         * - Total nodes in the left subtree
         * - Total nodes in the right subtree
         */
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
}


//Optimal approach

class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }

        //Compute the height of the leftmost path from a node
        int leftHeight = getLeftHeight(root);
        //Compute the height of the rightmost path from a node
        int rightHeight = getRightHeight(root);

        /*
        Perfect Binary Tree:
        - In a perfect binary tree, all internal nodes have exactly two children, and all leaf nodes are at the same level.
        - The total number of nodes in a perfect binary tree of height `h` is (2^h) - 1.
        
        Why is the "complete binary tree" property helpful for optimization?
        
        Since the given tree is guaranteed to be a complete binary tree:
        - All levels except possibly the last are completely filled.
        - Nodes in the last level are filled from left to right without any gaps in between.
        - This means it's not possible to have a missing node on the left and a present node on the right.
        
        Optimization Insight:
        - For any subtree, if the height of the leftmost path and the rightmost path are the same, then the subtree is a perfect binary tree.
        - This is because, due to the complete binary tree structure, there are no missing nodes in the intermediate levels,
          and any missing nodes in the last level will appear only at the end (right side).
        - So, if both left and right heights match, the subtree must be fully filled (i.e., perfect),
          and we can directly use the formula (2^h) - 1 to count nodes, avoiding full traversal.
        */
        // Check if the current tree/subtree is a perfect binary tree
        if (leftHeight == rightHeight) {
            return (int) Math.pow(2, leftHeight) - 1;
        }

        // If not a perfect tree, recursively count nodes in left and right subtrees
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    private int getLeftHeight(TreeNode node) {
        int count = 0;
        while (node != null) {
            count++;
            node = node.left;
        }
        return count;
    }

    private int getRightHeight(TreeNode node) {
        int count = 0;
        while (node != null) {
            count++;
            node = node.right;
        }
        return count;
    }
}
