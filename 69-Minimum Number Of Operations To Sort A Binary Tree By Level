/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private int minimumOperations(TreeNode root) {
        int operations = 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        // Perform BFS to get all levels of the tree
        while (!queue.isEmpty()) {
            int size = queue.size();
            int[] level = new int[size];
            int index = 0;

            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                level[index++] = node.val;
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
            }
            // For each level, calculate the minimum swaps needed to sort it using selection sort
            operations += selectionSortSwaps(level);
        }
    }

    private int selectionSortSwaps(int[] level) {
        int swaps = 0;

        // Selection Sort with swap counting, using List directly
        for (int i = 0; i < level.length - 1; i++) {
            // Find the minimum element in the unsorted part of the list
            int minIdx = i;
            for (int j = i + 1; j < level.length; j++) {
                if (level[j] < level[minIdx]) {
                    minIdx = j;
                }
            }

            // If the minimum element is not already in the correct position, swap
            if (minIdx != i) {
                swap(level, i, minIdx); // Swap the elements in the arr
                swaps++; // Increment swap count
            }
        }

        return swaps;
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Optimal approach

class Solution {
    public int minimumOperations(TreeNode root) {
        int operations = 0; // To count the total number of swaps required
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root); // Start BFS traversal from the root

        while (!queue.isEmpty()) {
            int size = queue.size();
            int[] level = new int[size]; // Array to store values at the current level
            int index = 0;

            // Process all nodes at the current level
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll(); // Remove node from the queue
                level[index++] = node.val; // Store node value in the array

                // Add left and right children to the queue for the next level
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
            }

            // Calculate the minimum swaps required to sort this level
            operations += minSwapsToSort(level);
        }

        return operations; // Return the total number of swaps required
    }

    private int minSwapsToSort(int[] level) {
        // Create a sorted copy of the array
        int[] sorted = level.clone();
        Arrays.sort(sorted);

        // Map each value to its correct index in the sorted array
        Map<Integer, Integer> sortedIndexMap = new HashMap<>();
        for (int i = 0; i < sorted.length; i++) {
            sortedIndexMap.put(sorted[i], i);
        }

        int swaps = 0;
        for (int i = 0; i < level.length;) {
            int correctIndex = sortedIndexMap.get(level[i]); // Get the correct index of level[i]
            // If the element is already in the correct index, move to the next index
            if (i == correctIndex) {
                i++;
            } else {
                // Swap the element to its correct position
                swap(level, i, correctIndex);
                swaps++; // Increment swap count
            }
        }
        return swaps; // Return the number of swaps required to sort the level
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
