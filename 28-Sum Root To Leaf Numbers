/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    // Global variable to store the total sum of all root-to-leaf numbers
    private int sum;

    public int sumNumbers(TreeNode root) {
        sum = 0;
        getAllPathsSum(root, new ArrayList<>());
        return sum;
    }

    private void getAllPathsSum(TreeNode root, List<Integer> path) {
        if (root == null) {
            return; // Base case: If current node is null, return
        }

        // Add the current node's value to the path
        path.add(root.val);

        // If it's a leaf node, form the number from path and add to sum
        if (isLeafNode(root)) {
            int number = getPathNumber(path); // Convert list of digits to actual number
            sum += number;

            // Backtrack: remove last added node value before returning
            path.remove(path.size() - 1);
            return;
        }

        // Recursive calls to left and right subtrees
        getAllPathsSum(root.left, path);
        getAllPathsSum(root.right, path);

        // Backtrack after exploring both children
        path.remove(path.size() - 1);
    }

    private int getPathNumber(List<Integer> number) {
        int num = 0;
        for (int val : number) {
            num = num * 10 + val;
        }
        return num;
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}


//Optimal approach

/*
 * When you pass currentPathNumber into the recursive function,
 * it creates a copy of currentPathNumber for each recursive call.
 * Each call modifies only its local copy of currentPathNumber.
 * Once a call returns, the parent call still has its original value 
 * 
 * There's no need to backtrack the value of currentPathNumber because integers (int) 
 * are passed by value in Java. Any modification to currentPathNumber inside the function
 * does not affect the value in the parent call.
 * 
 * This is different from lists (ArrayList) or objects, which are passed by reference 
 * and require explicit backtracking.
 */

class Solution {
    private int sum;

    public int sumNumbers(TreeNode root) {
        sum = 0;
        getAllPathsSum(root, 0); // Start recursive traversal with initial number as 0
        return sum;
    }

    private void getAllPathsSum(TreeNode root, int num) {
        // Base case: if the node is null, return immediately
        if (root == null) {
            return;
        }

        // Append current node's digit to the path number
        num = num * 10 + root.val;

        // If current node is a leaf, add the formed number to the global sum
        if (isLeafNode(root)) {
            sum += num;
            return;
        }

        // Recursively process left and right subtrees
        getAllPathsSum(root.left, num);
        getAllPathsSum(root.right, num);
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}
