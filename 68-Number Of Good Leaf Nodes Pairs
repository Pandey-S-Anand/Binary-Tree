/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce appraoch

class Solution {
    private int count = 0;
    private List<TreeNode> leafNodes;

    public int countPairs(TreeNode root, int distance) {
        // Step 1: Collect all the leaf nodes
        leafNodes = new ArrayList<>();
        collectLeafNodes(root);

        // Step 2: Compare every pair of leaves
        for (int i = 0; i < leafNodes.size(); i++) {
            for (int j = i + 1; j < leafNodes.size(); j++) {
                TreeNode leaf1 = leafNodes.get(i);
                TreeNode leaf2 = leafNodes.get(j);
                if (findDistance(root, leaf1, leaf2) <= distance) {
                    count++;
                }
            }
        }

        return count;
    }

    // Step 1: Collect all leaf nodes
    private void collectLeafNodes(TreeNode node) {
        if (node == null) {
            return;
        }

        if (node.left == null && node.right == null) {
            leafNodes.add(node);
            return;
        }

        collectLeafNodes(node.left);
        collectLeafNodes(node.right);
    }

    // Step 2: Find the LCA of two nodes
    private TreeNode findLCA(TreeNode root, TreeNode node1, TreeNode node2) {
        if (root == null) {
            return null;
        }

        if (root == node1 || root == node2) {
            return root;
        }

        TreeNode left = findLCA(root.left, node1, node2);
        TreeNode right = findLCA(root.right, node1, node2);

        if (left != null && right != null) {
            return root;
        }

        if (left != null) {
            return left;
        }

        if (right != null) {
            return right;
        }

        return null;
    }

    // Step 3: Find the distance between two nodes
    private int findDistance(TreeNode root, TreeNode node1, TreeNode node2) {
        TreeNode lca = findLCA(root, node1, node2);
        int distance1 = findDepth(lca, node1, 0);
        int distance2 = findDepth(lca, node2, 0);
        return distance1 + distance2;
    }

    // Step 4: Find the depth of a target node from the given root
    private int findDepth(TreeNode currentNode, TreeNode targetNode, int currentDepth) {
        // Base case: If the current node is null, return -1 to indicate the node is not found
        if (currentNode == null) {
            return -1;
        }

        // If the current node is the target node, return the current depth
        if (currentNode == targetNode) {
            return currentDepth;
        }

        // Search the left subtree for the target node by increasing the depth
        int leftDepth = findDepth(currentNode.left, targetNode, currentDepth + 1);

        // If the target node was found in the left subtree, return the depth
        if (leftDepth != -1) {
            return leftDepth;
        }

        // If the target node is not found in the left subtree, search the right subtree
        return findDepth(currentNode.right, targetNode, currentDepth + 1);
    }
}


//Improved approach

class Solution {
    private Map<TreeNode, TreeNode> parentMap; // Stores the parent of each node
    private List<TreeNode> leafNodes; // Stores all leaf nodes

    public int countPairs(TreeNode root, int distance) {
        leafNodes = new ArrayList<>();
        parentMap = new HashMap<>();

        // Step 1: Populate the parent map and collect leaf nodes using DFS
        collectLeafNodes(root, null);

        int count = 0;

        // Step 2: Compare every pair of leaf nodes using BFS to find distance
        for (int i = 0; i < leafNodes.size(); i++) {
            for (int j = i + 1; j < leafNodes.size(); j++) {
                TreeNode leaf1 = leafNodes.get(i);
                TreeNode leaf2 = leafNodes.get(j);

                // Step 3: Use BFS to calculate the shortest distance between the two leaves
                if (findDistanceBFS(leaf1, leaf2) <= distance) {
                    count++; // Count valid pairs
                }
            }
        }

        return count; // Return the total count of good leaf node pairs
    }

    private void collectLeafNodes(TreeNode node, TreeNode parent) {
        if (node == null) {
            return;
        }

        // Store the parent of the current node
        parentMap.put(node, parent);

        // If the node is a leaf (both left and right children are null), add to the leaf list
        if (node.left == null && node.right == null) {
            leafNodes.add(node);
        }

        // Recursively traverse left and right subtrees
        collectLeafNodes(node.left, node);
        collectLeafNodes(node.right, node);
    }

    private int findDistanceBFS(TreeNode node1, TreeNode node2) {
        Set<TreeNode> visited = new HashSet<>(); // Keep track of visited nodes to prevent cycles
        Queue<TreeNode> queue = new ArrayDeque<>(); // Queue for BFS traversal

        // Start BFS from node1
        queue.add(node1);
        visited.add(node1);

        int distance = 0; // Track the number of levels traversed

        while (!queue.isEmpty()) {
            int size = queue.size();

            // Process all nodes at the current level
            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();

                // If we reached node2, return the distance
                if (currentNode == node2) {
                    return distance;
                }

                // Add the left child to the queue if not visited
                if (currentNode.left != null && !visited.contains(currentNode.left)) {
                    queue.add(currentNode.left);
                    visited.add(currentNode.left);
                }

                // Add the right child to the queue if not visited
                if (currentNode.right != null && !visited.contains(currentNode.right)) {
                    queue.add(currentNode.right);
                    visited.add(currentNode.right);
                }

                // Move up to the parent node if not visited
                TreeNode parent = parentMap.get(currentNode);
                if (parent != null && !visited.contains(parent)) {
                    queue.add(parent);
                    visited.add(parent);
                }
            }

            distance++; // Increment distance after processing one level
        }

        return -1; // This case should never happen, as both nodes exist in the tree
    }
}


//Better approach

class Solution {
    private Map<TreeNode, TreeNode> parentMap;
    private Set<TreeNode> leafNodes;

    public int countPairs(TreeNode root, int distance) {
        leafNodes = new HashSet<>();
        parentMap = new HashMap<>();
        int count = 0;

        collectLeafNodes(root, null);
        /*
         * For each leaf node, perform a BFS to find all other leaves within the given distance.
         * Since the distance from leafNode1 to leafNode2 is the same as from leafNode2 to leafNode1,
         * each valid pair is counted twice. Therefore, we divide the final count by 2.
         */
        for (TreeNode leafNode : leafNodes) {
            count += findDistanceBFS(leafNode, distance);
        }

        return count / 2;
    }

    private void collectLeafNodes(TreeNode node, TreeNode parent) {
        if (node == null) {
            return;
        }

        parentMap.put(node, parent);

        if (node.left == null && node.right == null) {
            leafNodes.add(node);
        }

        collectLeafNodes(node.left, node);
        collectLeafNodes(node.right, node);
    }

    private int findDistanceBFS(TreeNode root, int maxDistance) {
        Set<TreeNode> visited = new HashSet<>();
        Queue<TreeNode> queue = new ArrayDeque<>();

        queue.add(root);
        visited.add(root);

        int distance = 0;
        int count = 0;

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();

                // If we find another leaf node within the max distance, count it
                if (node != root && leafNodes.contains(node) && distance <= maxDistance) {
                    count++;
                }

                if (node.left != null && !visited.contains(node.left)) {
                    queue.add(node.left);
                    visited.add(node.left);
                }

                if (node.right != null && !visited.contains(node.right)) {
                    queue.add(node.right);
                    visited.add(node.right);
                }

                TreeNode parent = parentMap.get(node);
                if (parent != null && !visited.contains(parent)) {
                    queue.add(parent);
                    visited.add(parent);
                }
            }

            distance++;
        }

        return count;
    }
}
