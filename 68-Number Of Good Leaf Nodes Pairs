/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private int count = 0;
    private List<TreeNode> leafNodes;

    public int countPairs(TreeNode root, int distance) {
        // Step 1: Collect all the leaf nodes
        leafNodes = new ArrayList<>();
        collectLeafNodes(root);

        // Step 2: Compare every pair of leaves
        for (int i = 0; i < leafNodes.size(); i++) {
            for (int j = i + 1; j < leafNodes.size(); j++) {
                TreeNode leaf1 = leafNodes.get(i);
                TreeNode leaf2 = leafNodes.get(j);
                if (findDistance(root, leaf1, leaf2) <= distance) {
                    count++;
                }
            }
        }

        return count;
    }

    // Step 1: Collect all leaf nodes
    private void collectLeafNodes(TreeNode node) {
        if (node == null) {
            return;
        }

        if (node.left == null && node.right == null) {
            leafNodes.add(node);
            return;
        }

        collectLeafNodes(node.left);
        collectLeafNodes(node.right);
    }

    // Step 2: Find the distance between two nodes
    private int findDistance(TreeNode root, TreeNode node1, TreeNode node2) {
        TreeNode lca = findLCA(root, node1, node2);
        int distance1 = findDepth(lca, node1, 0);
        int distance2 = findDepth(lca, node2, 0);
        return distance1 + distance2;
    }

    // Step 3: Find the LCA of two nodes
    private TreeNode findLCA(TreeNode root, TreeNode node1, TreeNode node2) {
        if (root == null) {
            return null;
        }

        if (root == node1 || root == node2) {
            return root;
        }

        TreeNode left = findLCA(root.left, node1, node2);
        TreeNode right = findLCA(root.right, node1, node2);

        if (left != null && right != null) {
            return root;
        }

        if (left != null) {
            return left;
        }

        if (right != null) {
            return right;
        }

        return null;
    }

    // Step 4: Find the depth of a target node from the given root
    private int findDepth(TreeNode currentNode, TreeNode targetNode, int currentDepth) {
        // Base case: If the current node is null, return -1 to indicate the node is not found
        if (currentNode == null) {
            return -1;
        }

        // If the current node is the target node, return the current depth
        if (currentNode == targetNode) {
            return currentDepth;
        }

        // Search the left subtree for the target node by increasing the depth
        int leftDepth = findDepth(currentNode.left, targetNode, currentDepth + 1);

        // If the target node was found in the left subtree, return the depth
        if (leftDepth != -1) {
            return leftDepth;
        }

        // If the target node is not found in the left subtree, search the right subtree
        return findDepth(currentNode.right, targetNode, currentDepth + 1);
    }
}


//Better approach

class Solution {
    private Map<TreeNode, TreeNode> parentMap; // Maps each node to its parent for upward traversal
    private Set<TreeNode> leafNodes; // Stores all leaf nodes of the tree

    public int countPairs(TreeNode root, int distance) {
        leafNodes = new HashSet<>();
        parentMap = new HashMap<>();
        int count = 0;

        // Step 1: Populate parentMap and collect all leaf nodes by DFS traversal
        collectLeafNodesAndBuildParentMap(root, null);

        /*
         * Step 2: For each leaf node, run BFS to find all other leaf nodes within
         * the specified distance.
         * Note: Since pairs are bidirectional (leaf1->leaf2 and leaf2->leaf1),
         * each pair will be counted twice. Hence, divide final count by 2.
         */
        for (TreeNode leafNode : leafNodes) {
            count += findDistanceBFS(leafNode, distance);
        }

        return count / 2; // Return the unique number of leaf pairs within distance
    }

    private void collectLeafNodesAndBuildParentMap(TreeNode node, TreeNode parent) {
        if (node == null) {
            return;
        }

        // Map the current node to its parent for upward traversal in BFS later
        parentMap.put(node, parent);

        // If current node is a leaf, add it to the leafNodes set
        if (isLeafNode(node)) {
            leafNodes.add(node);
        }

        // Recursively process left and right children
        collectLeafNodesAndBuildParentMap(node.left, node);
        collectLeafNodesAndBuildParentMap(node.right, node);
    }

    private int findDistanceBFS(TreeNode leafNode, int maxDistance) {
        Set<TreeNode> visited = new HashSet<>(); // To avoid revisiting nodes
        Queue<TreeNode> queue = new ArrayDeque<>(); // BFS queue

        // Initialize BFS with starting leaf node
        queue.add(leafNode);
        visited.add(leafNode);

        int distance = 0; // Current BFS level distance from starting leaf node
        int count = 0; // Count of leaf nodes within maxDistance (excluding starting node)

        // Continue BFS while queue is not empty and within maxDistance
        while (!queue.isEmpty() && distance <= maxDistance) {
            int size = queue.size();

            // Process all nodes at the current BFS level
            while (size-- > 0) {
                TreeNode currentNode = queue.poll();

                // If current node is a different leaf node within allowed distance, increment count
                if (leafNode != currentNode && leafNodes.contains(currentNode)) {
                    count++;
                }

                // Add left child to queue if not visited
                if (currentNode.left != null && !visited.contains(currentNode.left)) {
                    queue.add(currentNode.left);
                    visited.add(currentNode.left);
                }

                // Add right child to queue if not visited
                if (currentNode.right != null && !visited.contains(currentNode.right)) {
                    queue.add(currentNode.right);
                    visited.add(currentNode.right);
                }

                // Add parent node to queue if not visited (to allow upward traversal)
                TreeNode parent = parentMap.get(currentNode);
                if (parent != null && !visited.contains(parent)) {
                    queue.add(parent);
                    visited.add(parent);
                }
            }

            distance++; // Increment distance after processing one BFS level
        }

        return count; // Return number of leaf nodes found within maxDistance from leafNode
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}



//Optimal approach

//Intuitive implementation

class Solution {
    // To count valid leaf node pairs
    private int count = 0;

    public int countPairs(TreeNode root, int distance) {
        dfs(root, distance);
        return count;
    }

    private List<Integer> dfs(TreeNode node, int distance) {
        if (node == null) {
            return Collections.emptyList();
        }

        // If the node is a leaf
        if (node.left == null && node.right == null) {
            return Collections.singletonList(1); // Leaf at distance 1 from its parent
        }
        /*
         * leftSubtreeLeavesDistance: the size of this list indicates the number of leaf nodes in the left subtree,
         * and the value at each index represents the distance of each leaf node from the current node.
         */
        // Recursively get distances of leaves from left subtree
        List<Integer> leftSubtreeLeavesDistance = dfs(node.left, distance);
        /*
         * rightSubtreeLeavesDistance: the size of this list indicates the number of leaf nodes in the right subtree,
         * and the value at each index represents the distance of each leaf node from the current node.
         */
        // Recursively get distances of leaves from right subtree
        List<Integer> rightSubtreeLeavesDistance = dfs(node.right, distance);

        // Check pairs formed by one leaf in left subtree and one in right subtree
        for (int leftDistance : leftSubtreeLeavesDistance) {
            for (int rightDistance : rightSubtreeLeavesDistance) {
                // If combined distance is within limit, increment count
                if (leftDistance + rightDistance <= distance) {
                    count++; // Valid pair of leaf nodes
                }
            }
        }

        // Prepare and return updated distances to parent (increment each by 1)
        List<Integer> distancesToParent = new ArrayList<>();
        /*
         * Optimization: Only add leaf distances < 'distance' to avoid unnecessary computation.
         * Since we are only interested in leaf nodes that can form valid pairs,
         * discarding distances greater than equal to 'distance' prevents unnecessary processing in higher recursive calls.
         */
        for (int leftDistance : leftSubtreeLeavesDistance) {
            if (leftDistance + 1 <= distance) {
                distancesToParent.add(leftDistance + 1);
            }
        }

        for (int rightDistance : rightSubtreeLeavesDistance) {
            if (rightDistance + 1 <= distance) {
                distancesToParent.add(rightDistance + 1);
            }
        }

        return distancesToParent;
    }
}


//Optimal implementation

