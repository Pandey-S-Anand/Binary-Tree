/* A Binary Tree node
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/

//Naive approach

class Solution {
    ArrayList<Integer> leftView(Node root) {
        // Return an empty list if the tree is empty
        if (root == null) {
            return new ArrayList<>();
        }

        ArrayList<Integer> leftSideView = new ArrayList<>();

        // Queue to to track nodes at the current level (BFS)
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(root); // Start traversal from the root node

        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int size = queue.size();

            // Process all nodes at the current level
            for (int i = 0; i < size; i++) {
                Node node = queue.poll();

                // If it's the first node in the current level, add it to the result
                if (i == 0) {
                    leftSideView.add(node.data);
                }

                // Enqueue the left child if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }

                // Enqueue the right child if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
        }

        return leftSideView;
    }
}


//Optimal approach

class Solution {
    // List to store the result of the left view
    private ArrayList<Integer> leftSideView;
    
    ArrayList<Integer> leftView(Node root) {
        leftSideView = new ArrayList<>();
        dfs(root, 0);  // Start DFS from root at depth 0
        return leftSideView;
    }
    
    private void dfs(Node root, int depth) {
        // Base case: if the current node is null, just return
        if (root == null) {
            return;
        }

        // If this is the first node we're visiting at the current depth, it will be the leftmost node of that level.
        if (depth == leftSideView.size()) {
            leftSideView.add(root.data);
        }

        // Explore the left subtree first to ensure leftmost nodes are added first
        dfs(root.left, depth + 1);

        // Then explore the right subtree
        dfs(root.right, depth + 1);
    }
}
