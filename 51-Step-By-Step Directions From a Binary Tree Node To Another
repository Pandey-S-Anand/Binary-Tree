class Solution {
    public String getDirections(TreeNode root, int startValue, int destValue) {
        /*
         * ➤ Why LCA?
         * - Because it's the **lowest (deepest) node** in the tree that has:
         *     • one target node in its **left subtree** and
         *     • the other target node in its **right subtree**, 
         *     • OR it **is** one of the target nodes and the other lies in one of its subtrees.
         *
         * ➤ Purpose of finding the LCA in this problem:
         * - From the start node, we go **upwards** to the LCA using 'U'.
         * - From the LCA, we go **downwards** to the destination using 'L' or 'R'.
         */
        //Step 1: Find the Lowest Common Ancestor (LCA) of startValue and destValue.
        TreeNode lca = findLowestCommonAncestor(root, startValue, destValue);

        // Step 2: Find path from LCA to startValue, replace all steps with 'U' since we move up to the LCA.
        StringBuilder pathToStart = new StringBuilder();
        findPath(lca, startValue, pathToStart, true); // true => we're building path towards the start node

        // Step 3: Find the path from LCA to destValue, keeping 'L' (Left) and 'R' (Right) moves.
        StringBuilder pathToDestination = new StringBuilder();
        findPath(lca, destValue, pathToDestination, false); // false => path towards destination, keep directions

        // Step 4: Final path = move up to LCA (U...) + move down to destination (L...R...)
        return pathToStart.append(pathToDestination).toString();
    }

    private TreeNode findLCA(TreeNode root, int value1, int value2) {
        if (root == null) {
            return null;
        }

        if (root.val == value1 || root.val == value2) {
            return root;
        }

        TreeNode left = findLCA(root.left, value1, value2);
        TreeNode right = findLCA(root.right, value1, value2);

        if (left != null && right != null) {
            return root;
        }

        if (left != null) {
            return left;
        }

        if (right != null) {
            return right;
        }

        return null;
    }

    /**
     * Builds a path from the current root to the target node.
     * - If pathToStart is true: appends 'U' for every step (we're building upward path from start to LCA).
     * - If pathToStart is false: appends 'L' or 'R' depending on traversal direction.
     * Returns true if target node was found in the subtree rooted at current node.
     */
    private boolean findPath(TreeNode root, int target, StringBuilder path, boolean pathToStart) {
        // Base Case: If the current node is null, return false (target not found in this path).
        if (root == null) {
            return false;
        }

        // If the current node is the target node, return true.
        if (root.val == target) {
            return true;
        }

        // Try moving to the left child
        path.append(pathToStart ? 'U' : 'L');
        if (findPath(root.left, target, path, pathToStart)) {
            return true; // If the left subtree contains the target, return true.
        }

        path.setLength(path.length() - 1); // Backtrack if the target was not found in the left subtree.

        // Try moving to the right child
        path.append('R');
        if (findPath(root.right, target, path, pathToStart)) {
            return true; // If the right subtree contains the target, return true.
        }

        path.deleteCharAt(path.length() - 1); // Backtrack if the target was not found in the right subtree.
        return false; // If neither left nor right subtree contains the target, return false.
    }
}
