/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private List<TreeNode> preorderTraversal;

    public void flatten(TreeNode root) {
        preorderTraversal = new ArrayList<>();
        // Get the preorder traversal of the tree as a list of nodes
        findPreorderTraversal(root);

        TreeNode prevNode = root;

        for (int i = 1; i < preorderTraversal.size(); i++) {
            TreeNode currentNode = preorderTraversal.get(i);
            // Set previous node's left child to null as we are flattening into a singly linked list
            prevNode.left = null;
            // Link previous node's right to the current node
            prevNode.right = currentNode;
            // Update the previous node to current node
            prevNode = currentNode;
        }
    }

    private void findPreorderTraversal(TreeNode root) {
        if (root == null) {
            return;
        }

        preorderTraversal.add(root);
        findPreorderTraversal(root.left);
        findPreorderTraversal(root.right);
    }
}


//Better Approach

class Solution {
    private TreeNode prevNode;

    public void flatten(TreeNode root) {
        prevNode = null;
        findPreorderTraversal(root);
    }

    private void findPreorderTraversal(TreeNode root) {
        if (root == null) {
            return;
        }

        if (prevNode != null) {
            prevNode.left = null;
            prevNode.right = root;
        }

        prevNode = root;

        TreeNode rightSubtree = root.right;
        /*
         * The `flatten(root.left)` call may modify the original right subtree structure
         * if `root` has a left child. As a result, when `flatten(root.right)` is
         * called, `root.right` might no longer point to the original right subtree.
         * To prevent this, we store a reference to the original right subtree
         * before making the recursive call.
         */
        findPreorderTraversal(root.left);
        findPreorderTraversal(rightSubtree);
    }
}


//Optimal approach

/*
Dry Run for the tree:

Input Tree:
        1
       / \
      2   5
     / \   \
    3   4   6

Step-by-Step:

1. Start at node 1:
   - 1 has left child 2, so find the rightmost node in left subtree (4).
   - 4.right = 5 (current.right).
   - Move left subtree (2) to the right, set 1.left = null.
   Tree becomes:
        1
         \
          2
         / \
        3   4
             \
              5
               \
                6
   Move to 2.

2. Start at node 2:
   - 2 has left child 3, so find the rightmost node in left subtree (3).
   - 3.right = 4 (current.right).
   - Move left subtree (3) to the right, set 2.left = null.
   Tree becomes:
        1
         \
          2
           \
            3
             \
              4
               \
                5
                 \
                  6
   Move to 3.

3. Start at node 3:
   - 3 has no left child.
   Move to 4.

4. Start at node 4:
   - 4 has no left child.
   Move to 5.

5. Start at node 5:
   - 5 has no left child.
   Move to 6.

6. Start at node 6:
   - 6 has no left child.
   Move to null.

Final Flattened Tree:
1 -> 2 -> 3 -> 4 -> 5 -> 6
*/


class Solution {
    public void flatten(TreeNode root) {
        // Start with the root node
        TreeNode currentNode = root;

        while (currentNode != null) {

            // If the current node has a left child
            if (currentNode.left != null) {

                // Step 1: Find the rightmost node in the left subtree
                TreeNode rightMostNode = currentNode.left;
                while (rightMostNode.right != null) {
                    rightMostNode = rightMostNode.right;
                }

                // Step 2: Connect the rightmost node's right pointer to the current node's right subtree
                rightMostNode.right = currentNode.right;

                // Step 3: Move the left subtree to the right and set left to null
                currentNode.right = currentNode.left;
                currentNode.left = null;
            }

            // Move to the next node in the flattened tree
            currentNode = currentNode.right;
        }
    }
}
