//Recursive approach

class Solution {
    /*
    * Children Sum Property conditions:
    * - If both left and right children exist:
    *      node.data == left.data + right.data
    * - If only one child exists:
    *      node.data == that child's data (missing child considered as 0)
    * - If node is a leaf (no children):
    *      property is valid by definition
    */
    public static int isSumProperty(Node root) {
        return checkSumProperty(root) ? 1 : 0;
    }

    private static boolean checkSumProperty(Node root) {
        if (root.left == null && root.right == null) {
            return true; // Leaf nodes always satisfy the property.
        }

        // Compute the sum of left and right child values (null children are considered as 0).
        int leftChildValue = (root.left != null) ? root.left.data : 0;
        int rightChildValue = (root.right != null) ? root.right.data : 0;

        // The current node should have value equal to the sum of its children.
        if (root.data != leftChildValue + rightChildValue) {
            return false;
        }

        /* By default, leftCheck and rightCheck are set to true because:
         * The children sum property only applies if the child node exists.
         * If a child is null (does not exist), it is considered to satisfy the property by default (true).
         */
        boolean leftCheck = true;
        if (root.left != null) {
            // Recursively check left subtrees.
            leftCheck = checkSumProperty(root.left);
        }

        boolean rightCheck = true;
        if (root.right != null) {
            // Recursively check right subtrees.
            rightCheck = checkSumProperty(root.right);
        }
        
        // Return true only if both left and right subtrees satisfy the property.
        return leftCheck && rightCheck;
    }
}


//Iterative approach

class Solution {
    public static int isSumProperty(Node root) {
        // Queue for level-order traversal (BFS).
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(root);

        while (!queue.isEmpty()) {
            Node currentNode = queue.poll();

            // Leaf nodes automatically satisfy the property.
            if (currentNode.left == null && currentNode.right == null) {
                continue;
            }

            // Get values of children (consider null as 0).
            int leftChildValue = (currentNode.left != null) ? currentNode.left.data : 0;
            int rightChildValue = (currentNode.right != null) ? currentNode.right.data : 0;

            // Check if the sum property holds at the current node.
            if (currentNode.data != leftChildValue + rightChildValue) {
                return 0; // If one node fails, return 0 immediately.
            }

            // Add children to queue if they exist.
            if (currentNode.left != null) {
                queue.offer(currentNode.left);
            }
            if (currentNode.right != null) {
                queue.offer(currentNode.right);
            }
        }

        return 1; // All nodes satisfied the property.
    }
}
