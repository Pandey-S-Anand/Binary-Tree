/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Method 1 (Using BFS)

class Solution {
    public int maxLevelSum(TreeNode root) {
        int maxSum = Integer.MIN_VALUE;
        int levelWithMaxSum = 0;
        int currentLevel = 0;

        // Queue for level-order traversal (BFS).
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);

        // Traverse the tree level by level.
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            int currentLevelSum = 0;
            currentLevel++; // Increment level counter as we move to the next level.

            // Process all nodes at the current level.
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                currentLevelSum += node.val; // Sum the values of nodes at the current level.

                // Add left child to the queue if it exists.
                if (node.left != null) {
                    queue.offer(node.left);
                }

                // Add right child to the queue if it exists.
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }

            // If there are multiple levels with the same maximum sum, the smallest level number is returned.
            if (currentLevelSum > maxSum) {
                // Update the maximum sum and corresponding level if the current level sum is higher.
                maxSum = currentLevelSum;
                levelWithMaxSum = currentLevel;
            }
        }

        return levelWithMaxSum;
    }
}


//Method 2 (Using DFS)

class Solution {
    // List to store the cumulative sum for each level.
    private List<Integer> levelSums;

    public int maxLevelSum(TreeNode root) {
        // The element at index i corresponds to the cumulative sum at level i (0-indexed).
        levelSums = new ArrayList<>();

        // Start the DFS traversal from the root at level 0.
        computeLevelSums(root, 0);

        int maxSum = Integer.MIN_VALUE;
        int levelWithMaxSum = 0;

        // Iterate through the levelSums list to find the level with the maximum sum.
        for (int i = 0; i < levelSums.size(); i++) {
            if (levelSums.get(i) > maxSum) {
                maxSum = levelSums.get(i);
                levelWithMaxSum = i;
            }
        }
        // Return the level with maximum sum (converted to 1-indexed level).
        return levelWithMaxSum + 1;
    }

    private void computeLevelSums(TreeNode node, int level) {
        if (node == null) {
            return;
        }

        // If this is the first time we are visiting this level, add a new entry to the levelSums list with the current node's value.
        if (level == levelSums.size()) {
            levelSums.add(node.val);
        }else if (level < levelSums.size()) { // For subsequent visit to the level ,update the existing sum for this level.
            levelSums.set(level, levelSums.get(level) + node.val);
        }

        // Recurse to the left and right children, increasing the level.
        computeLevelSums(node.left, level + 1);
        computeLevelSums(node.right, level + 1);
    }
}
