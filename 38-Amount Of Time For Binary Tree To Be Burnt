/*class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}*/

//Intuitive approach

class Solution {
    private Map<Integer, Node> parentMap;
    private Node targetNode;

    public int minTime(Node root, int target) {
        parentMap = new HashMap<>();
        targetNode = null;
        /**
         * Why do we need parent references?
         * -----------------------------------
         * - In a binary tree, we can move to child nodes directly from a parent,
         *   but there's no direct way to move back to the parent.
         * - To support upward traversal (towards ancestors) during BFS from the target node,
         *   we record parent references for each node beforehand.
         *
         * Additionally:
         * - While building parent mapping, we also locate and store the node object
         *   that has the same value as the given target.
         */
        /**
         * Traverse the tree to:
         * 1. Build a mapping from each node to its parent
         * 2. Locate and store the reference to the target node
         */
        mapParentsAndLocateTarget(root, null, target);

        int minutes = 0; // Target node is burnt at 0th minute

        // Queue for BFS traversal (each level = 1 minute)
        Queue<Node> queue = new ArrayDeque<>();
        // Set to track visited/burnt nodes to avoid revisiting
        Set<Integer> burnt = new HashSet<>();
        // Start BFS from the target node
        queue.offer(targetNode);
        burnt.add(targetNode.data);

        // Process all burnt nodes at this minute
        while (!queue.isEmpty()) {
            boolean newInfection = false; // Track if any node got burnt during this minute
            int size = queue.size();

            while (size-- > 0) {
                Node node = queue.poll();

                // Infect left child if it exists and is not already burnt
                if (node.left != null && !burnt.contains(node.left.data)) {
                    queue.offer(node.left);
                    burnt.add(node.left.data);
                    newInfection = true;
                }

                // Infect right child if it exists and is not already burnt
                if (node.right != null && !burnt.contains(node.right.data)) {
                    queue.offer(node.right);
                    burnt.add(node.right.data);
                    newInfection = true;
                }

                // Infect the parent node if it exists and hasn't been burnt yet.
                Node parentNode = parentMap.get(node.data);
                if (parentNode != null && !burnt.contains(parentNode.data)) {
                    queue.offer(parentNode);
                    burnt.add(parentNode.data);
                    newInfection = true;
                }
            }

            if (newInfection) {
                minutes++; // Increment time only if at least one new node was burnt
            }

            /*
             * The nodes present in the queue represent the nodes that were burnt in the current minute.
             * These nodes will proceed to spread the fire to
             * their adjacent nodes in the subsequent minutes.
             */
        }

        return minutes;
    }

    private void mapParentsAndLocateTarget(Node node, Node parent, int target) {
        if (node == null) {
            return;
        }

        if (node.data == target) {
            targetNode = node; // Save the reference to the target node
        }

        parentMap.put(node.data, parent); // Map child to its parent

        mapParentsAndLocateTarget(node.left, node, target); // Recurse for left subtree
        mapParentsAndLocateTarget(node.right, node, target); // Recurse for right subtree
    }
}


//Optimal approach

/*
    **Tree Structure:**
           8
          / \
         1   7
       /   \
      5     3
       \    / \
        4  10  6
       / \    /
      9   2  11

    **Understanding the Problem:**
    - The minimum time required to burn the entire binary tree is equal to the maximum distance 
      between the target node and the farthest leaf node.
    - So, our goal is to find the distance between the farthest leaf node and the target node.

    **How the Algorithm Works:**
    - A call is made at node 8, checking both left (1) and right (7) subtrees.
    - A call at node 1 explores its left (5) and right (3) subtrees.
    - The left subtree rooted at node 5 returns 3, indicating its depth.
    - The right subtree call at node 3 explores its left (10) and right (6) subtrees, with left subtree returning 1 and right subtree returning 2 as their depth.
    - `maxDistance` is updated to `max(1, 2) = 2`. 
      This means that, currently, the farthest leaf node from the target node is at a distance of 2.
    - Since node 3 is the target node, Node 3 then returns `-1` to its parent (node 1), signaling that the target node was found in its (1s) right subtree.
      This `abs(-1)` represents the distance from node 1 to the target node 3.
    - At node 1, `maxDistance` is updated again: `max(2, 3 + abs(-1)) = 4`. 
      This means that the farthest leaf node (which is either 9 or 2) is at a distance of **4** from the target node.
    - The depth returned to node 8 is `-2`, meaning node 8 is 2 steps away from the target node.
    - The right subtree of node 8 returns depth 1.
    - The final `maxDistance` remains **4**, representing the minimum time required to burn the tree.
    
    **Burning Process Over Time (Minute-wise Spread of Infection):**
    
    - **Minute 0**: Node **3** is burnt.
    - **Minute 1**: Nodes **10, 6, and 1** get burnt (childrens and parent of node 3).
    - **Minute 2**: Nodes **5, 8 and 11** get burnt (parent and left child of 1 and left child of 6).
    - **Minute 3**: Nodes **4 and 7** get burnt (right child of 5 and 8).
    - **Minute 4**: Nodes **9 and 2** get burnt (childrens of 4).
    
    **Final Result:**
    - **4** (minimum time required to burn the tree).
*/


class Solution {
    // maxDistance keeps track of the maximum distance from the target node to the farthest leaf node encountered so far.
    private static int maxDistance;

    public static int minTime(Node root, int target) {
        maxDistance = 0;
        findMinBurningTime(root, target);
        return maxDistance;
    }

    private static int findMinBurningTime(Node root, int target) {
        if (root == null) {
            return 0;
        }

        int depth = 0;
        int leftDepth = findMinBurningTime(root.left, target);
        int rightDepth = findMinBurningTime(root.right, target);
        // If the current node is the target node, update maxDistance with the maximum depth of its left or right subtree.
        if (root.data == target) {
            maxDistance = Math.max(leftDepth, rightDepth);
            /*
             We return a negative value to indicate to the parent node that the target 
             has been found in the subtree. This depth value represents the distance 
             of the parent node from the target node.
            */
            depth = -1;
        } else if (leftDepth >= 0 && rightDepth >= 0) {
            // If neither the left nor the right subtree contains the target node, return the depth of the current subtree.
            depth = Math.max(leftDepth, rightDepth) + 1;
        } else if (leftDepth < 0) {
            // If the left subtree contains the target node:
            int distance = Math.abs(leftDepth) + rightDepth;
            maxDistance = Math.max(maxDistance, distance);
            // Decrease depth further (by -1) to indicate how far the immediate ancestor is from the target node.
            depth = leftDepth - 1;
        } else {
            // If the right subtree contains the target node:
            int distance = leftDepth + Math.abs(rightDepth);
            maxDistance = Math.max(maxDistance, distance);
            // Decrease depth further (by -1) to indicate how far the immediate ancestor is from the target node.
            depth = rightDepth - 1;
        }

        return depth;
    }
}
