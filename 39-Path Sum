/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Bruteforce approach

class Solution {
    private List<List<Integer>> paths; // Stores all root-to-leaf paths

    public boolean hasPathSum(TreeNode root, int targetSum) {
        paths = new ArrayList<>();
        getAllPaths(root, new ArrayList<>()); // Find all root-to-leaf paths

        // Iterate through all paths to check if any sum equals targetSum
        for (List<Integer> path : paths) {
            if (getPathSum(path) == targetSum) {
                return true; // If a valid path is found, return true
            }
        }

        return false; // No valid path found, return false
    }

    private void getAllPaths(TreeNode currentNode, List<Integer> currentPath) {
        // Base case: If the node is null, return immediately
        if (currentNode == null) {
            return;
        }

        // Add the current node's value to the path
        currentPath.add(currentNode.val);

        // If this is a leaf node, add the current path to the paths list
        if (currentNode.left == null && currentNode.right == null) {
            paths.add(new ArrayList<>(currentPath)); // Store a copy of the path
            currentPath.remove(currentPath.size() - 1); // Backtrack to explore other paths
            return;
        }

        // Recursively explore the left and right subtrees
        getAllPaths(currentNode.left, currentPath);
        getAllPaths(currentNode.right, currentPath);

        // Backtrack: Remove the current node from the path before returning to the previous level
        currentPath.remove(currentPath.size() - 1);
    }

    private int getPathSum(List<Integer> path) {
        int sum = 0;

        // Calculate the sum of all elements in the given path
        for (int num : path) {
            sum += num;
        }

        return sum; // Return the computed sum
    }
}


//Optimal approach

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        // Base case: If the tree is empty, there's no path to check
        if (root == null) {
            return false;
        }

        // Subtract the current node's value from the target sum
        targetSum -= root.val;

        // If it's a leaf node (both left and right children are null), check if the sum is achieved
        if (root.left == null && root.right == null) {
            return targetSum == 0;
        }

        // Recursively check the left subtree; if a valid path is found, return true
        if (hasPathSum(root.left, targetSum)) {
            return true;
        }

        // Recursively check the right subtree; return its result
        return hasPathSum(root.right, targetSum);
    }
}
