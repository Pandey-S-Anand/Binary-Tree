/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        // Base case: If the tree is empty, there's no path to check
        if (root == null) {
            return false;
        }

        // Subtract the current node's value from the target sum
        targetSum -= root.val;

        // If it's a leaf node (both left and right children are null), check if the sum is achieved
        if (root.left == null && root.right == null) {
            return targetSum == 0;
        }

        // Recursively check the left subtree; if a valid path is found, return true
        if (hasPathSum(root.left, targetSum)) {
            return true;
        }

        // Recursively check the right subtree; return its result
        return hasPathSum(root.right, targetSum);
    }
}
