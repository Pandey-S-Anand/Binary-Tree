/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive approach

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        // Base case: If tree is empty, return empty list
        if (root == null) {
            return Collections.emptyList();
        }

        List<Integer> rightSideView = new ArrayList<>();

        // Queue for level-order traversal (BFS)
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root); // Start BFS from root

        // Perform level-order traversal
        while (!queue.isEmpty()) {
            int size = queue.size(); // Number of nodes at current level

            // Traverse all nodes at this level
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();

                // The last node processed in this level is the rightmost node
                if (i == size - 1) {
                    rightSideView.add(node.val);
                }

                // Enqueue the left child if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }

                // Enqueue the right child if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
        }

        return rightSideView;
    }
}


//Optimal approach

class Solution {
    private List<Integer> rightView;

    public List<Integer> rightSideView(TreeNode root) {
        rightView = new ArrayList<>();
        dfs(root, 0);
        return rightView;
    }

    private void dfs(TreeNode root, int depth) {
        if (root == null) {
            return;
        }

        // If this is the first node at the current depth, add it to the right view
        if (depth == rightView.size()) {
            rightView.add(root.val);
        }

        // Prioritize the right subtree to ensure rightmost nodes are processed first
        dfs(root.right, depth + 1);

        // Process the left subtree after the right subtree
        dfs(root.left, depth + 1);
    }
}
