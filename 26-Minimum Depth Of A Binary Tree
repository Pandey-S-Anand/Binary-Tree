//Recursive approach

class Solution {
    /*
     * Note:
     * Minimum depth of a binary tree is defined as the shortest path length from the root node down to the nearest leaf node.
     * When finding max depth of a binary tree, these null-child corner cases
     * do not need special handling because max depth naturally picks the longer path.
     * But for min depth, we must handle null children explicitly to avoid
     * incorrectly counting missing paths as zero depth.
     */
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0; // Empty tree has depth 0
        }
        
        int leftDepth = minDepth(root.left);
        int rightDepth = minDepth(root.right);

        // If both children are null, this is a leaf node
        if (root.left == null && root.right == null) {
            return 1;
        }

        // If left child is null, recurse only on right subtree
        if (root.left == null) {
            return 1 + rightDepth;
        }

        // If right child is null, recurse only on left subtree
        if (root.right == null) {
            return 1 + leftDepth;
        }

        // Both children exist, take minimum of both depths + 1
        return 1 + Math.min(leftDepth, rightDepth);
    }
}


//Iterative approach

class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0; // Empty tree has depth 0
        }

        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root); // Start BFS from root
        int depth = 0; // Initialize depth counter

        // Level-order traversal (BFS)
        while (!queue.isEmpty()) {
            depth++; // Increment depth at each level
            int size = queue.size(); // Number of nodes at current level

            // Process all nodes at current level
            while (size-- > 0) {
                TreeNode node = queue.poll();
                
                //The first encountered leaf node in BFS traversal represents the minimum depth, so we can return the current depth immediately.
                if (isLeafNode(node)) {
                    return depth;
                }

                // Add left child to queue if exists
                if (node.left != null) {
                    queue.offer(node.left);
                }

                // Add right child to queue if exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
        }

        return -1; // Should never reach here for a valid binary tree
    }

    private boolean isLeafNode(TreeNode node) {
        return node.left == null && node.right == null;
    }
}
