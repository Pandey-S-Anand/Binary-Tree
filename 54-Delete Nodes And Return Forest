/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

/*
 * Why do we use post-order traversal here? (return forest after deletions)
 *
 * If we use in-order traversal (Left → Root → Right), we process the left subtree first.
 * When a node in the left subtree is in the deletion set, we delete it and then move to the root.
 * If the root is also marked for deletion, we remove it and consider its right child as a new tree in the forest.
 * However, if the right child is also in the deletion set, we might miss deleting it properly 
 * because it has already been detached from the root.
 *
 * A similar issue occurs with pre-order traversal (Root → Left → Right), where deleting a node before processing 
 * its children can lead to incorrect handling of subtree deletions.
 *
 * In contrast, post-order traversal (Left → Right → Root) ensures all child nodes are fully processed before the current node.
 * This prevents premature detachment and guarantees that all deletions and updates to the forest are handled correctly.
 * Therefore, post-order traversal is the best choice for this problem.
 */
class Solution {
    private Set<Integer> toDelete; // Stores nodes that need to be deleted
    private List<TreeNode> forest; // Stores the roots of trees in the remaining forest

    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        // Add nodes to be deleted into a HashSet for quick lookup
        toDelete = Arrays.stream(to_delete).boxed().collect(Collectors.toSet());
        forest = new ArrayList<>();

        // Process the tree using post-order traversal
        root = deleteNodes(root);

        // If the root itself was not deleted, add it to the forest
        if (root != null) {
            forest.add(root);
        }

        return forest;
    }

    private TreeNode deleteNodes(TreeNode root) {
        if (root == null) {
            return null;
        }

        // Post-order traversal: First process left and right children
        root.left = deleteNodes(root.left);
        root.right = deleteNodes(root.right);
        // If the current node is in the delete list
        if (toDelete.contains(root.val)) {
            // If the left child exists, add it to the forest
            if (root.left != null) {
                forest.add(root.left);
            }

            // If the right child exists, add it to the forest
            if (root.right != null) {
                forest.add(root.right);
            }
            // Return null to mark this node as deleted
            return null;
        }
        // If the node is not deleted, return it as is
        return root;
    }
}
