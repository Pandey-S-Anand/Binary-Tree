/*
class Node {
    int data;
    Node left, right;

    public Node(int data){
        this.data = data;
    }
}
*/

//Recursive approach

class Solution {
    public ArrayList<Integer> nodesAtOddLevels(Node root) {
        // Use TreeSet to automatically sort the collected node values
        Set<Integer> oddLevelNodes = new TreeSet<>();

        // Start DFS from the root at level 1 (which is odd)
        dfs(root, true, oddLevelNodes);

        // Convert the sorted set to a list before returning
        return new ArrayList<>(oddLevelNodes);
    }

    private void dfs(Node root, boolean isOddLevel, Set<Integer> oddLevelNodes) {
        // Base case: return if the current node is null
        if (root == null) {
            return;
        }

        // If the current level is odd, add the node's value to the set
        if (isOddLevel) {
            oddLevelNodes.add(root.data);
        }

        // Recurse for left and right children, flipping the level parity
        dfs(root.left, !isOddLevel, oddLevelNodes);
        dfs(root.right, !isOddLevel, oddLevelNodes);
    }
}



//Iterative approach

class Solution {
    public ArrayList<Integer> nodesAtOddLevels(Node root) {
        // TreeSet to automatically maintain sorted order of node values that are at odd levels
        Set<Integer> oddLevelNodes = new HashSet<>();

        // Boolean flag to track whether the current level is odd
        boolean isOddLevel = true;

        // Queue for level order traversal (BFS)
        Queue<Node> queue = new ArrayDeque<>();
        queue.offer(root);

        // Standard BFS loop
        while (!queue.isEmpty()) {
            int size = queue.size();  // Number of nodes at the current level

            // Process all nodes at the current level
            while (size-- > 0) {
                Node node = queue.poll();

                // If the current level is odd, add the node's value to the result list
                if (isOddLevel) {
                    oddLevelNodes.add(node.data);
                }

                // Add left and right children to the queue for next level
                if (node.left != null) {
                    queue.offer(node.left);
                }

                if (node.right != null) {
                    queue.offer(node.right);
                }
            }

            // Flip the level status (odd → even, even → odd)
            isOddLevel = !isOddLevel;
        }

        // Convert the sorted set into a list
        return new ArrayList<>(oddLevelNodes);
    }
}
