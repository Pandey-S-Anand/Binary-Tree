/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

class Solution {
    /**
     * The core idea behind pruning the tree is to remove any subtree
     * that does not contain a single occurrence of '1'.
     *
     * Key Conditions for Pruning a Node:
     * 1. If both left and right subtrees contain only '0's (i.e they are null after pruning) AND the node itself is also '0',
     *    Then the entire subtree starting from this node is useless and should be removed.
     *
     * 2. If the node or any of its subtrees contain at least one '1',
     * → Then we keep the node, since it contributes to the valid tree.
     */
    public TreeNode pruneTree(TreeNode root) {
        // Base case: If the current node is null, return null (no subtree to process)
        if (root == null) {
            return null;
        }

        // Recursively prune the left and right subtrees
        root.left = pruneTree(root.left);
        root.right = pruneTree(root.right);

        /*
         * If the current node is '0' and both left & right children are null after
         * pruning, it means the entire subtree does not contain '1' → Remove it
         */
        if (root.val == 0 && root.left == null && root.right == null) {
            return null; // Remove this node by returning null
        }

        // If the node contains '1' or has a valid child, return it as part of the final pruned tree
        return root;
    }
}
