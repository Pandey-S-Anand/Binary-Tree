/* 
    Example of Postorder Traversal:

    Consider the following binary tree:

              1
            /   \
           2     3
         /  \     \
        4    5     6

    Postorder Traversal: Left → Right → Root

    1. Start at the root node (1).
        - Move to the left child node 2.

    2. Move to the left child of node 2 (node 4).
        - Visit node 4 → Add 4 to the list.
        - Node 4 has no children, so return to node 2.

    3. Move to the right child of node 2 (node 5).
        - Visit node 5 → Add 5 to the list.
        - Node 5 has no children, so return to node 2.

    4. Visit node 2.
        - Visit node 2 → Add 2 to the list.
        - Return to node 1.

    5. Move to the right child of node 1 (node 3).

    6. Move to the right child of node 3 (node 6).
        - Visit node 6 → Add 6 to the list.
        - Node 6 has no children, so return to node 3.

    7. Visit node 3.
        - Visit node 3 → Add 3 to the list.
        - Return to node 1.

    8. Visit node 1.
        - Visit node 1 → Add 1 to the list.
        - End traversal.

    Postorder Traversal Result: [4, 5, 2, 6, 3, 1]

    In Postorder Traversal, the nodes are visited in the following order:
    Left Subtree → Right Subtree → Root.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive Approach

//Recursive implementation

class Solution {
    private List<Integer> postorderTraversal;

    public List<Integer> postorderTraversal(TreeNode root) {
        postorderTraversal = new ArrayList<>();
        performPostorderTraversal(root);
        return postorderTraversal;
    }

    private void performPostorderTraversal(TreeNode root) {
        if (root == null) { // Base case: If the node is null, return
            return;
        }

        performPostorderTraversal(root.left); // Recursively traverse the left subtree
        performPostorderTraversal(root.right); // Recursively traverse the right subtree
        postorderTraversal.add(root.val); // Process the current node (add its value to the result list)
    }
}


//Iterative implementation

//Naive implementation

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        // If the tree is empty, return an empty list
        if (root == null) {
            return Collections.emptyList();
        }

        List<Integer> postorderTraversal = new ArrayList<>();

        Deque<TreeNode> stack = new ArrayDeque<>();

        // Start the traversal by pushing the root node onto the stack
        stack.push(root);
        // The traversal is stored in the order: root -> right -> left
        while (!stack.isEmpty()) {
            // Pop the top node from the stack
            TreeNode node = stack.pop();

            // Add the node's value to the result list
            postorderTraversal.add(node.val);

            // If the node has a left child, push it onto the stack (left child is pushed last to be processed after the right child)
            if (node.left != null) {
                stack.push(node.left);
            }

            // If the node has a right child, push it onto the stack
            if (node.right != null) {
                stack.push(node.right);
            }
        }
        
        // Reverse the result list to get the postorder traversal: left -> right -> root
        Collections.reverse(postorderTraversal);

        return postorderTraversal;
    }
}


//Optimal implementation

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        if (root == null) {
            return Collections.emptyList();
        }

        // Use LinkedList to efficiently insert elements at the beginning (mimicking postorder)
        List<Integer> postorderTraversal = new LinkedList<>();

        Deque<TreeNode> stack = new ArrayDeque<>();

        stack.push(root);
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();

            postorderTraversal.add(0, node.val);

            if (node.left != null) {
                stack.push(node.left);
            }

            if (node.right != null) {
                stack.push(node.right);
            }
        }

        return postorderTraversal;
    }
}


//Optimal approach

