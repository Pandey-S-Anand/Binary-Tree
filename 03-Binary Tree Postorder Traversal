/* 
    Example of Postorder Traversal:

    Consider the following binary tree:

              1
            /   \
           2     3
         /  \     \
        4    5     6

    Postorder Traversal: Left → Right → Root

    1. Start at the root node (1).
        - Move to the left child node 2.

    2. Move to the left child of node 2 (node 4).
        - Visit node 4 → Add 4 to the list.
        - Node 4 has no children, so return to node 2.

    3. Move to the right child of node 2 (node 5).
        - Visit node 5 → Add 5 to the list.
        - Node 5 has no children, so return to node 2.

    4. Visit node 2.
        - Visit node 2 → Add 2 to the list.
        - Return to node 1.

    5. Move to the right child of node 1 (node 3).

    6. Move to the right child of node 3 (node 6).
        - Visit node 6 → Add 6 to the list.
        - Node 6 has no children, so return to node 3.

    7. Visit node 3.
        - Visit node 3 → Add 3 to the list.
        - Return to node 1.

    8. Visit node 1.
        - Visit node 1 → Add 1 to the list.
        - End traversal.

    Postorder Traversal Result: [4, 5, 2, 6, 3, 1]

    In Postorder Traversal, the nodes are visited in the following order:
    Left Subtree → Right Subtree → Root.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive Approach

//Recursive implementation

class Solution {
    private List<Integer> postorder;

    public List<Integer> postorderTraversal(TreeNode root) {
        postorder = new ArrayList<>();
        performPostorderTraversal(root);
        return postorder;
    }

    private void performPostorderTraversal(TreeNode root) {
        if (root == null) {
            return;
        }

        performPostorderTraversal(root.left); // Recursively traverse the left subtree
        performPostorderTraversal(root.right); // Recursively traverse the right subtree
        postorder.add(root.val); // Process the current node (add its value to the result list)
    }
}


//Iterative implementation

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        // If the tree is empty, return an empty list
        if (root == null) {
            return Collections.emptyList();
        }

        List<Integer> postorder = new ArrayList<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        stack.push(root); // Start the traversal by pushing the root node onto the stack

        TreeNode currentNode = root;
        // The traversal is stored in the order: root -> right -> left
        while (!stack.isEmpty()) {
            // Pop the top node from the stack
            TreeNode node = stack.pop();
            // Add the node's value to the result list
            postorder.add(node.val);

            // If the node has a left child, push it onto the stack (left child is pushed last to be processed after the right child)
            if (node.left != null) {
                stack.push(node.left);
            }

            // If the node has a right child, push it onto the stack
            if (node.right != null) {
                stack.push(node.right);
            }
        }

        // Reverse the result list to get the postorder traversal: left -> right -> root
        Collections.reverse(postorder);

        return postorder;
    }
}



//Optimal approach

/*
Dry Run for the tree:

Input Tree:
         1
       /   \
      2     5
     /     / \
    3      6  7

Step-by-Step:

1. Start at node 1:
   - 1 has right child 5, so find the leftmost node in the right subtree (6).
   - 4.left = 1 (create temporary thread).
   - value collected: 1
   - Move to the right child of 1 (i.e., 5)

   Tree becomes:
          1
        / | \
       2  |  5
      /   | / \
     3     6   7


2. Start at node 5:
   - 5 has right child 7, so find the leftmost node in the right subtree (7).
   - 7.left = 5 (create temporary thread).
   - value collected: 5
   - Move to the right child of 5 (i.e., 7)

   Tree becomes:
          1
        / | \
       2  |  5
      /   | /|\
     3     6 <-7

3. Start at node 7:
   - 7 has no right child.
   - value collected: 7
   - Move to left (i.e., 5 via temporary thread)

4. Start at node 5 again:
   - Temporary link detected (leftmost node  in right subtree of 5 (i.e 7) has left pointer pointing to current node i.e 5)
   - Remove temporary link.
   - Move to left (i.e., 6)

       Tree becomes:
          1
        / | \
       2  |  5
      /   | /|\
     3     6 <-7

5. Start at node 6:
   - 6 has no right child.
   - value collected: 6
   - Move to left (i.e., 1 via temporary thread)

6. Start at node 1 again:
   - Temporary link detected (leftmost node  in right subtree of 1 (i.e 6) has left pointer pointing to current node i.e 1)
   - Remove temporary link.
   - Move to left (i.e., 2)

7. Start at node 2:
   - 2 has no right child.
   - value collected: 2
   - Move to left (i.e., 3)

8. Start at node 3:
   - 3 has no right child.
   - value collected: 3
   - Move to left (i.e., null)

Values Collected:
[1, 5, 7, 6, 2, 3]

Preorder Traversal Collected:
[3, 2, 6, 7, 5, 1]
*/

//Intuitive implementation

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> postorder = new ArrayList<>();
        TreeNode currentNode = root;
        // The traversal is stored in the order: root -> right -> left
        while (currentNode != null) {
            // Case 1: If there is no right subtree, process the node and move to the left subtree
            if (currentNode.right == null) {
                postorder.add(currentNode.val);
                currentNode = currentNode.left;
            } else {
                // Case 2: If right subtree exists, find the leftMost node in the right subtree
                TreeNode leftMostNode = currentNode.right;
                // Move to the leftmost node in the right subtree
                /*
                 * leftMostNode.left != current condition is detecting the temporary link
                 * If leftMostNode.left is already pointing to current, we need to revert the changes we made.
                 */
                while (leftMostNode.left != null && leftMostNode.left != currentNode) {
                    leftMostNode = leftMostNode.left;
                }

                if (leftMostNode.left == currentNode) {
                    /*
                     * This condition indicates that we have finished processing the right subtree.
                     * so remove the temporary link, and move to the left subtree.
                     */
                    leftMostNode.left = null; // Remove the temporary link
                    currentNode = currentNode.left; // Move to the left subtree
                } else {
                    postorder.add(currentNode.val); // Add current node value to the list
                    leftMostNode.left = currentNode; // Create a temporary link from the leftmost node to the current node
                    currentNode = currentNode.right; // Move to the right subtree
                }
            }
        }
        // Reverse the result list to get the postorder traversal: left -> right -> root
        Collections.reverse(postorder);

        return postorder;
    }
}


//Optimal implementation

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        // LinkedList allows adding nodes at front (offerFirst) to reverse root-right-left order into correct postorder (left-right-root) without extra reversal.
        LinkedList<Integer> postorder = new LinkedList<>();
        TreeNode currentNode = root;

        while (currentNode != null) {
            if (currentNode.right == null) {
                postorder.offerFirst(currentNode.val);
                currentNode = currentNode.left;
            } else {
                TreeNode leftMostNode = currentNode.right;

                while (leftMostNode.left != null && leftMostNode.left != currentNode) {
                    leftMostNode = leftMostNode.left;
                }

                if (leftMostNode.left == currentNode) {
                    leftMostNode.left = null;
                    currentNode = currentNode.left;
                } else {
                    postorder.offerFirst(currentNode.val);
                    leftMostNode.left = currentNode;
                    currentNode = currentNode.right;
                }
            }
        }

        return postorder;
    }
}
