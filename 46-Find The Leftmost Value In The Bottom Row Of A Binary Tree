/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */

//Naive approach

class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);
        int bottomLeftValue = root.val; // Initialize with root's value

        while (!queue.isEmpty()) {
            int levelSize = queue.size(); // Number of nodes at the current level
            boolean isFirstNodeInLevel = false; // Flag to track the first node in the level

            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll(); // Process the current node
                
                // Capture the first node's value of the current level
                if (!isFirstNodeInLevel) {
                    bottomLeftValue = currentNode.val;
                    isFirstNodeInLevel = true;
                }

                // Enqueue left child
                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }

                // Enqueue right child
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }
        }

        return bottomLeftValue;
    }
}



//Optimal approach

class Solution {
    private int leftmostValue;
    private int maxDepth;

    public int findBottomLeftValue(TreeNode root) {
        leftmostValue = root.val; // Initialize with root's value
        maxDepth = -1;
        findBottomLeftValue(root, 0);
        return leftmostValue;
    }

    private void findBottomLeftValue(TreeNode node, int currentDepth) {
        if (node == null) {
            return;
        }

        // If this is the first node encountered at the currentDepth, update leftmostValue
        if (currentDepth > maxDepth) {
            maxDepth = currentDepth;
            leftmostValue = node.val;
        }

        // Prioritize left subtree to ensure leftmost node is recorded first
        findBottomLeftValue(node.left, currentDepth + 1);
        findBottomLeftValue(node.right, currentDepth + 1);
    }
}
