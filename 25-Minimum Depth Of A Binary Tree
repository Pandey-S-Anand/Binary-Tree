//Recursive approach

class Solution {
    int minDepth(Node root) {
        // If the root is null, return 0 as there is no tree.
        if (root == null) {
            return 0;
        }

        // If both left and right subtrees are null, we are at a leaf node, so the depth is 1.
        if (root.left == null && root.right == null) {
            return 1;
        }

        // If the left subtree is null, only consider the right subtree.
        if (root.left == null) {
            return 1 + minDepth(root.right);
        }

        // If the right subtree is null, only consider the left subtree.
        if (root.right == null) {
            return 1 + minDepth(root.left);
        }

        // If both subtrees are non-null, calculate the depth of both subtrees and return the minimum depth between them.
        int minDepthLeft = minDepth(root.left);
        int minDepthRight = minDepth(root.right);
        
        return 1 + Math.min(minDepthLeft, minDepthRight);
    }
}



//Iterative approach

