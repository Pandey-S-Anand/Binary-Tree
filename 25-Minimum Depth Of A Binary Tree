//Recursive approach

class Solution {
    public int minDepth(TreeNode root) {
        // If the root is null, return 0 as there is no tree.
        if (root == null) {
            return 0;
        }

        // If both left and right subtrees are null, we are at a leaf node, so the depth is 1.
        if (root.left == null && root.right == null) {
            return 1;
        }

        // If the left subtree is null, only consider the right subtree.
        if (root.left == null) {
            return 1 + minDepth(root.right);
        }

        // If the right subtree is null, only consider the left subtree.
        if (root.right == null) {
            return 1 + minDepth(root.left);
        }

        // If both subtrees are non-null, calculate the depth of both subtrees and return the minimum depth between them.
        int minDepthLeft = minDepth(root.left);
        int minDepthRight = minDepth(root.right);
        
        return 1 + Math.min(minDepthLeft, minDepthRight); 
    }
}


//Iterative approach

class Solution {
    public int minDepth(TreeNode root) {
        // If the tree is empty, depth is 0
        if (root == null) {
            return 0;
        }

        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.offer(root);
        int depth = 0;

        // Perform level-order traversal
        while (!queue.isEmpty()) {
            // Number of nodes at the current level
            int size = queue.size();
            depth++; // Increase depth at each level

            // Process all nodes at the current level
            for (int i = 0; i < size; i++) {
                TreeNode currentNode = queue.poll();
                
                // If we reach a leaf node, return the current depth
                if(currentNode.left==null && currentNode.right==null){
                   return depth;
                }
                
                // Add child nodes to the queue
                if (currentNode.left != null) {
                    queue.offer(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.offer(currentNode.right);
                }
            }
        }

        return depth; // This statement will never be reached
    }
}
