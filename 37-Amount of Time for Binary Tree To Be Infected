/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Intuitive approach

class Solution {
    private Map<Integer, TreeNode> parentMap;
    private TreeNode targetNode;

    public int amountOfTime(TreeNode root, int start) {
        parentMap = new HashMap<>();
        targetNode = null;
        /**
         * Why do we need parent references?
         * -----------------------------------
         * - In a binary tree, we can move to child nodes directly from a parent,
         *   but there's no direct way to move back to the parent.
         * - To support upward traversal (towards ancestors) during BFS from the target node,
         *   we record parent references for each node beforehand.
         *
         * Additionally:
         * - While building parent mapping, we also locate and store the node object
         *   that has the same value as the given target.
         */
        /**
         * Traverse the tree to:
         * 1. Build a mapping from each node to its parent
         * 2. Locate and store the reference to the target node
         */
        mapParentsAndLocateTarget(root, null, start);

        int minutes = 0; // Target node is infected at 0th minute

        // Queue for BFS traversal (each level = 1 minute)
        Queue<TreeNode> queue = new ArrayDeque<>();
        // Set to track visited/infected nodes to avoid revisiting
        Set<Integer> infected = new HashSet<>();
        // Start BFS from the target node
        queue.offer(targetNode);
        infected.add(targetNode.val);

        // Process all infected nodes at this minute
        while (!queue.isEmpty()) {
            boolean newInfection = false; // Track if any node got infected during this minute
            int size = queue.size();

            while (size-- > 0) {
                TreeNode node = queue.poll();

                // Infect left child if it exists and is not already infected
                if (node.left != null && !infected.contains(node.left.val)) {
                    queue.offer(node.left);
                    infected.add(node.left.val);
                    newInfection = true;
                }

                // Infect right child if it exists and is not already infected
                if (node.right != null && !infected.contains(node.right.val)) {
                    queue.offer(node.right);
                    infected.add(node.right.val);
                    newInfection = true;
                }

                // Infect the parent node if it exists and hasn't been infected yet.
                TreeNode parentNode = parentMap.get(node.val);
                if (parentNode != null && !infected.contains(parentNode.val)) {
                    queue.offer(parentNode);
                    infected.add(parentNode.val);
                    newInfection = true;
                }
            }

            if (newInfection) {
                minutes++; // Increment time only if at least one new infection occurred
            }

            /*
             * The nodes present in the queue represent the nodes that were infected in the current minute.
             * These nodes will proceed to spread the infection to
             * their adjacent nodes in the subsequent minutes.
             */
        }

        return minutes;
    }

    private void mapParentsAndLocateTarget(TreeNode node, TreeNode parent, int target) {
        if (node == null) {
            return;
        }

        if (node.val == target) {
            targetNode = node; // Save the reference to the target node
        }

        parentMap.put(node.val, parent); // Map child to its parent

        mapParentsAndLocateTarget(node.left, node, target); // Recurse for left subtree
        mapParentsAndLocateTarget(node.right, node, target); // Recurse for right subtree
    }
}


//Optimal approach (Without using parent map)

/*
    **Tree Structure:**
           8
          / \
         1   7
       /   \
      5     3
       \    / \
        4  10  6
       / \    /
      9   2  11

    **Understanding the Problem:**
    - The amount of time required to infect the entire binary tree is equal to the maximum distance 
      between the infected node and the farthest leaf node.
    - So, our goal is to find the distance between the farthest leaf node and the start node (infected node).

    **How the Algorithm Works:**
    - A call is made at node 8, checking both left (1) and right (7) subtrees.
    - A call at node 1 explores its left (5) and right (3) subtrees.
    - The left subtree rooted at node 5 returns 3, indicating its depth.
    - The right subtree call at node 3 explores its left (10) and right (6) subtrees, with left subtree returning 1 and right subtree returning 2 as their depth.
    - `maxDistance` is updated to `max(1, 2) = 2`. 
      This means that, currently, the farthest leaf node from the infected node is at a distance of 2.
    - Since node 3 is the infection source, Node 3 then returns `-1` to its parent (node 1), signaling that the infection was found in its right subtree.
      This `abs(-1)` represents the distance from node 1 to the infected node 3.
    - At node 1, `maxDistance` is updated again: `max(2, 3 + abs(-1)) = 4`. 
      This means that the farthest leaf node (which is either 9 or 2) is at a distance of **4** from the infected node.
    - The depth returned to node 8 is `-2`, meaning node 8 is 2 steps away from the infected node.
    - The right subtree of node 8 returns depth 1.
    - The final `maxDistance` remains **4**, representing the longest time for the infection to reach the farthest node.
    
    **Burning Process Over Time (Minute-wise Spread of Infection):**
    
    - **Minute 0**: Node **3** is infected.
    - **Minute 1**: Nodes **10, 6, and 1** get infected (childrens and parent of node 3).
    - **Minute 2**: Nodes **5, 8 and 11** get infected (parent and left child of 1 and left child of 6).
    - **Minute 3**: Nodes **4 and 7** get infected (right child of 5 and 8).
    - **Minute 4**: Nodes **9 and 2** get infected (childrens of 4).
    
    **Final Result:**
    - **4** (time taken for the infection to spread to the farthest node).
*/


class Solution {
    // maxDistance keeps track of the maximum distance from the infected node  to the farthest leaf node encountered so far.
    private int maxDistance = 0;

    public int amountOfTime(TreeNode root, int start) {
        findMaxInfectionTime(root, start);
        return maxDistance;
    }

    private int findMaxInfectionTime(TreeNode root, int start) {
        if (root == null) {
            return 0;
        }

        int depth = 0;
        int leftDepth = findMaxInfectionTime(root.left, start);
        int rightDepth = findMaxInfectionTime(root.right, start);

        if (root.val == start) {
            // If the current node is the infected node, update maxDistance with the maximum depth of its left or right subtree.
            maxDistance = Math.max(leftDepth, rightDepth);
            depth = -1;
            /*
             We return a negative value to indicate to the parent node that the infection 
             has been found in the subtree. This depth value represents the distance 
             of the parent node from the infected node.
            */
        } else if (leftDepth >= 0 && rightDepth >= 0) {
            // If neither the left nor the right subtree contains the infected node, return the depth of the current subtree.
            depth = Math.max(leftDepth, rightDepth) + 1;
        } else if (leftDepth < 0) {
            // If the left subtree contains the infected node:
            int distance = Math.abs(leftDepth) + rightDepth;
            maxDistance = Math.max(maxDistance, distance);
            // Decrease depth further (by -1) to indicate how far the immediate ancestor is from the infected node.
            depth = leftDepth - 1;
        } else {
            // If the right subtree contains the infected node:
            int distance = leftDepth + Math.abs(rightDepth);
            maxDistance = Math.max(maxDistance, distance);
            // Decrease depth further (by -1) to indicate how far the immediate ancestor is from the infected node.
            depth = rightDepth - 1;
        }

        return depth;
    }
}
