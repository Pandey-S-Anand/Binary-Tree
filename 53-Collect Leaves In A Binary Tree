/*
                1
            /       \
          2           3
        /   \        /   \
       4     5      6     7
      /     / \      \
     8     9   10    11

   Output:
   [
     [8, 9, 10, 11, 7], // First set of leaf nodes removed (Height =1)
     [4, 5, 6],         // New leaf nodes after previous removal  (Height =2)
     [2, 3],            // New leaf nodes after previous removal  (Height =3)
     [1]                // Last remaining node  (Height =4)
   ]
*/


public class Solution {

    // TreeMap ensures that keys (heights) are sorted in ascending order which reflects bottom-up collection from leaf to root.
    private static Map<Integer, ArrayList<Integer>> heightToLeavesMap;

    public static ArrayList<ArrayList<Integer>> collectLeaves(BinaryTreeNode<Integer> root) {
        heightToLeavesMap = new TreeMap<>();

        // Fill the map by computing height of each node and collecting nodes by height
        calculateHeightAndCollectLeaves(root);

        ArrayList<ArrayList<Integer>> collectedLeaves = new ArrayList<>();
        
        // Iterate over TreeMap to collect lists of leaves level-by-level (bottom-up)
        for (int height : heightToLeavesMap.keySet()) {
            collectedLeaves.add(heightToLeavesMap.get(height));
        }

        return collectedLeaves;
    }

    private static int calculateHeightAndCollectLeaves(BinaryTreeNode<Integer> root) {
        // Base case: null node contributes height 0
        if (root == null) {
            return 0;
        }

        // Recursively calculate height of left and right subtrees
        int leftSubtreeHeight = calculateHeightAndCollectLeaves(root.left);
        int rightSubtreeHeight = calculateHeightAndCollectLeaves(root.right);

        // Height of current node = max height of subtrees + 1
        int currentSubtreeHeight = Math.max(leftSubtreeHeight, rightSubtreeHeight) + 1;

        // Get the list of nodes at current height, or create a new one if absent
        ArrayList<Integer> leavesAtCurrentHeight = heightToLeavesMap.getOrDefault(currentSubtreeHeight,new ArrayList<>());

        // Add current node's value to its corresponding height group
        leavesAtCurrentHeight.add(root.data);

        // Update the map with the modified list
        heightToLeavesMap.put(currentSubtreeHeight, leavesAtCurrentHeight);

        return currentSubtreeHeight;
    }
}
