/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
 
//Using BFS

class Solution {
    public List<Integer> largestValues(TreeNode root) {
        // If the tree is empty, return an empty list
        if (root == null) {
            return Collections.emptyList();
        }

        // List to store the largest values at each level
        List<Integer> largestValues = new ArrayList<>();

        // Queue for level-order traversal (BFS)
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int size = queue.size(); // Number of nodes at the current level
            int maxInRow = Integer.MIN_VALUE; // Track the maximum value in the current level

            // Process all nodes in the current level
            while (size-- > 0) {
                TreeNode node = queue.poll(); // Remove and process the front node

                // Update the maximum value found at this level
                maxInRow = Math.max(maxInRow, node.val);

                // Add the left child to the queue if it exists
                if (node.left != null) {
                    queue.offer(node.left);
                }

                // Add the right child to the queue if it exists
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }

            // Store the maximum value found at this level
            largestValues.add(maxInRow);
        }

        return largestValues;
    }
}


//Using DFS

class Solution {
    // Map to keep track of the maximum value at each level (key = level, value = max value)
    private Map<Integer, Integer> levelToMaxValueMap;

    public List<Integer> largestValues(TreeNode root) {
        // If the input tree is empty, return an empty list
        if (root == null) {
            return Collections.emptyList();
        }

        // Initialize the map
        levelToMaxValueMap = new HashMap<>();

        // Start DFS traversal to find max at each level
        findMaxInEachLevel(root, 0);

        // Collect and return the max values from each level in order
        return new ArrayList<>(levelToMaxValueMap.values());
    }

    private void findMaxInEachLevel(TreeNode node, int currentLevel) {
        if (node == null) {
            return;
        }

        // If visiting this level for the first time, add current node's value
        levelToMaxValueMap.putIfAbsent(currentLevel, node.val);

        // Update the level's max value if the current node's value is greater
        levelToMaxValueMap.put(currentLevel, Math.max(levelToMaxValueMap.get(currentLevel), node.val));

        // Recurse for left and right children with increased level
        findMaxInEachLevel(node.left, currentLevel + 1);
        findMaxInEachLevel(node.right, currentLevel + 1);
    }
}
